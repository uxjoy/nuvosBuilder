import { InjectionToken, inject } from '@angular/core';
import { createFeature, } from './features';
export const LoggerToken = new InjectionToken('Ng Icon Logger');
/**
 * The default logger implementation that logs to the console
 */
export class DefaultLogger {
    log(message) {
        console.log(message);
    }
    warn(message) {
        console.warn(message);
    }
    error(message) {
        console.error(message);
    }
}
/**
 * A logger implementation that throws an error on warnings and errors
 */
export class ExceptionLogger {
    log(message) {
        console.log(message);
    }
    warn(message) {
        throw new Error(message);
    }
    error(message) {
        throw new Error(message);
    }
}
export function injectLogger() {
    return inject(LoggerToken, { optional: true }) ?? new DefaultLogger();
}
/**
 * Throw exceptions on warnings and errors
 */
export function withExceptionLogger() {
    return createFeature(1 /* NgIconFeatureKind.ExceptionLoggerFeature */, [
        { provide: LoggerToken, useClass: ExceptionLogger },
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL3Byb3ZpZGVycy9mZWF0dXJlcy9sb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUdMLGFBQWEsR0FDZCxNQUFNLFlBQVksQ0FBQztBQVFwQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQVMsZ0JBQWdCLENBQUMsQ0FBQztBQUV4RTs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFhO0lBQ3hCLEdBQUcsQ0FBQyxPQUFlO1FBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUNELElBQUksQ0FBQyxPQUFlO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUNELEtBQUssQ0FBQyxPQUFlO1FBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUMxQixHQUFHLENBQUMsT0FBZTtRQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBZTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBZTtRQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVSxZQUFZO0lBQzFCLE9BQU8sTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLElBQUksYUFBYSxFQUFFLENBQUM7QUFDeEUsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLG1CQUFtQjtJQUNqQyxPQUFPLGFBQWEsbURBQTJDO1FBQzdELEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFO0tBQ3BELENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBFeGNlcHRpb25Mb2dnZXJGZWF0dXJlLFxuICBOZ0ljb25GZWF0dXJlS2luZCxcbiAgY3JlYXRlRmVhdHVyZSxcbn0gZnJvbSAnLi9mZWF0dXJlcyc7XG5cbmludGVyZmFjZSBMb2dnZXIge1xuICBsb2cobWVzc2FnZTogc3RyaW5nKTogdm9pZDtcbiAgd2FybihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkO1xuICBlcnJvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgTG9nZ2VyVG9rZW4gPSBuZXcgSW5qZWN0aW9uVG9rZW48TG9nZ2VyPignTmcgSWNvbiBMb2dnZXInKTtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBsb2dnZXIgaW1wbGVtZW50YXRpb24gdGhhdCBsb2dzIHRvIHRoZSBjb25zb2xlXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0TG9nZ2VyIGltcGxlbWVudHMgTG9nZ2VyIHtcbiAgbG9nKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICB9XG4gIHdhcm4obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICB9XG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBIGxvZ2dlciBpbXBsZW1lbnRhdGlvbiB0aGF0IHRocm93cyBhbiBlcnJvciBvbiB3YXJuaW5ncyBhbmQgZXJyb3JzXG4gKi9cbmV4cG9ydCBjbGFzcyBFeGNlcHRpb25Mb2dnZXIgaW1wbGVtZW50cyBMb2dnZXIge1xuICBsb2cobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gIH1cblxuICB3YXJuKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxuXG4gIGVycm9yKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0TG9nZ2VyKCk6IExvZ2dlciB7XG4gIHJldHVybiBpbmplY3QoTG9nZ2VyVG9rZW4sIHsgb3B0aW9uYWw6IHRydWUgfSkgPz8gbmV3IERlZmF1bHRMb2dnZXIoKTtcbn1cblxuLyoqXG4gKiBUaHJvdyBleGNlcHRpb25zIG9uIHdhcm5pbmdzIGFuZCBlcnJvcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhFeGNlcHRpb25Mb2dnZXIoKTogRXhjZXB0aW9uTG9nZ2VyRmVhdHVyZSB7XG4gIHJldHVybiBjcmVhdGVGZWF0dXJlKE5nSWNvbkZlYXR1cmVLaW5kLkV4Y2VwdGlvbkxvZ2dlckZlYXR1cmUsIFtcbiAgICB7IHByb3ZpZGU6IExvZ2dlclRva2VuLCB1c2VDbGFzczogRXhjZXB0aW9uTG9nZ2VyIH0sXG4gIF0pO1xufVxuIl19