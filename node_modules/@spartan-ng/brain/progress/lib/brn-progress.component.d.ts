import { type NumberInput } from '@angular/cdk/coercion';
import { OnChanges, SimpleChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class BrnProgressComponent implements OnChanges {
    readonly value: import("@angular/core").InputSignalWithTransform<number | null | undefined, NumberInput>;
    readonly max: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    readonly getValueLabel: import("@angular/core").InputSignal<BrnProgressLabelFn>;
    protected readonly label: import("@angular/core").Signal<string | undefined>;
    protected readonly state: import("@angular/core").Signal<"indeterminate" | "complete" | "loading">;
    ngOnChanges(changes: SimpleChanges): void;
    private validate;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnProgressComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnProgressComponent, "brn-progress", ["brnProgress"], { "value": { "alias": "value"; "required": false; "isSignal": true; }; "max": { "alias": "max"; "required": false; "isSignal": true; }; "getValueLabel": { "alias": "getValueLabel"; "required": false; "isSignal": true; }; }, {}, never, ["*"], true, never>;
}
export type BrnProgressLabelFn = (value: number, max: number) => string;
