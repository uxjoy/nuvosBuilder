import { type AfterContentInit, type OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class BrnAccordionItemDirective {
    private static _itemIdGenerator;
    private readonly _accordion;
    readonly isOpened: import("@angular/core").InputSignalWithTransform<boolean, any>;
    readonly id: number;
    readonly state: import("@angular/core").Signal<"open" | "closed">;
    constructor();
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnAccordionItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnAccordionItemDirective, "[brnAccordionItem]", ["brnAccordionItem"], { "isOpened": { "alias": "isOpened"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
export declare class BrnAccordionTriggerDirective {
    private readonly _accordion;
    private readonly _item;
    private readonly _elementRef;
    readonly state: import("@angular/core").Signal<"open" | "closed">;
    readonly id: string;
    readonly ariaControls: string;
    constructor();
    protected toggle(event: Event): void;
    focus(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnAccordionTriggerDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnAccordionTriggerDirective, "[brnAccordionTrigger]", never, {}, {}, never, never, true, never>;
}
export declare class BrnAccordionDirective implements AfterContentInit, OnDestroy {
    private readonly _el;
    private _keyManager?;
    private readonly _focusMonitor;
    private readonly _focused;
    private readonly _openItemIds;
    readonly openItemIds: import("@angular/core").Signal<number[]>;
    readonly state: import("@angular/core").Signal<"open" | "closed">;
    triggers: import("@angular/core").Signal<readonly BrnAccordionTriggerDirective[]>;
    readonly type: import("@angular/core").InputSignal<"single" | "multiple">;
    readonly dir: import("@angular/core").InputSignal<"ltr" | "rtl" | null>;
    readonly orientation: import("@angular/core").InputSignal<"horizontal" | "vertical">;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    setActiveItem(item: BrnAccordionTriggerDirective): void;
    toggleItem(id: number): void;
    openItem(id: number): void;
    closeItem(id: number): void;
    private preventDefaultEvents;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnAccordionDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnAccordionDirective, "[brnAccordion]", ["brnAccordion"], { "type": { "alias": "type"; "required": false; "isSignal": true; }; "dir": { "alias": "dir"; "required": false; "isSignal": true; }; "orientation": { "alias": "orientation"; "required": false; "isSignal": true; }; }, {}, ["triggers"], never, true, never>;
}
