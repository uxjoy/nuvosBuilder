import { BrnSelectPlaceholderDirective } from './brn-select-placeholder.directive';
import { BrnSelectValueDirective } from './brn-select-value.directive';
import * as i0 from "@angular/core";
export declare class BrnSelectValueComponent<T> {
    protected readonly _select: import("@spartan-ng/brain/select").BrnSelectComponent<T>;
    readonly id: import("@angular/core").Signal<string>;
    readonly placeholder: import("@angular/core").Signal<string>;
    protected readonly _showPlaceholder: import("@angular/core").Signal<boolean>;
    /** Allow a custom value template */
    protected readonly customValueTemplate: import("@angular/core").Signal<BrnSelectValueDirective<any> | undefined>;
    protected readonly customPlaceholderTemplate: import("@angular/core").Signal<BrnSelectPlaceholderDirective | undefined>;
    protected readonly value: import("@angular/core").Signal<any>;
    /** Normalize the values as an array */
    protected readonly _values: import("@angular/core").Signal<T[]>;
    readonly transformFn: import("@angular/core").InputSignal<(values: (string | undefined)[]) => any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnSelectValueComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnSelectValueComponent<any>, "brn-select-value, hlm-select-value", never, { "transformFn": { "alias": "transformFn"; "required": false; "isSignal": true; }; }, {}, ["customValueTemplate", "customPlaceholderTemplate"], never, true, never>;
}
