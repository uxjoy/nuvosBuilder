import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { CdkConnectedOverlay, type ConnectedOverlayPositionChange, type ConnectedPosition } from '@angular/cdk/overlay';
import { type DoCheck, type Signal } from '@angular/core';
import { type ControlValueAccessor, NgControl } from '@angular/forms';
import { type ExposesSide, type ExposesState } from '@spartan-ng/brain/core';
import { BrnFormFieldControl } from '@spartan-ng/brain/form-field';
import { ChangeFn, ErrorStateTracker, TouchFn } from '@spartan-ng/brain/forms';
import { BrnLabelDirective } from '@spartan-ng/brain/label';
import { Subject } from 'rxjs';
import { BrnSelectContentComponent } from './brn-select-content.component';
import { BrnSelectOptionDirective } from './brn-select-option.directive';
import { BrnSelectTriggerDirective } from './brn-select-trigger.directive';
import * as i0 from "@angular/core";
export type BrnReadDirection = 'ltr' | 'rtl';
export declare class BrnSelectComponent<T = unknown> implements ControlValueAccessor, DoCheck, ExposesSide, ExposesState, BrnFormFieldControl {
    private readonly _defaultErrorStateMatcher;
    private readonly _parentForm;
    private readonly _injector;
    private readonly _parentFormGroup;
    readonly ngControl: NgControl | null;
    readonly id: import("@angular/core").InputSignal<string>;
    readonly multiple: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    readonly placeholder: import("@angular/core").InputSignal<string>;
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    readonly dir: import("@angular/core").InputSignal<BrnReadDirection>;
    readonly closeDelay: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    readonly open: import("@angular/core").ModelSignal<boolean>;
    readonly value: import("@angular/core").ModelSignal<T | T[] | undefined>;
    readonly compareWith: import("@angular/core").InputSignal<(o1: T, o2: T) => boolean>;
    readonly _formDisabled: import("@angular/core").WritableSignal<boolean>;
    /** Label provided by the consumer. */
    protected readonly selectLabel: Signal<BrnLabelDirective | undefined>;
    /** Overlay pane containing the options. */
    protected readonly selectContent: Signal<BrnSelectContentComponent<any>>;
    /** @internal */
    readonly options: Signal<readonly BrnSelectOptionDirective<any>[]>;
    /** @internal Derive the selected options to filter out the unselected options */
    readonly selectedOptions: Signal<BrnSelectOptionDirective<any>[]>;
    /** Overlay pane containing the options. */
    protected readonly _overlayDir: Signal<CdkConnectedOverlay>;
    readonly trigger: import("@angular/core").WritableSignal<BrnSelectTriggerDirective<T> | null>;
    readonly triggerWidth: import("@angular/core").WritableSignal<number>;
    protected readonly _delayedExpanded: Signal<boolean>;
    readonly state: Signal<"open" | "closed">;
    protected readonly _positionChanges$: Subject<ConnectedOverlayPositionChange>;
    readonly side: Signal<'top' | 'bottom' | 'left' | 'right'>;
    readonly labelId: Signal<string | import("@angular/core").InputSignal<string>>;
    private _onChange;
    private _onTouched;
    protected _positions: ConnectedPosition[];
    errorStateTracker: ErrorStateTracker;
    readonly errorState: Signal<boolean>;
    constructor();
    ngDoCheck(): void;
    toggle(): void;
    show(): void;
    hide(): void;
    writeValue(value: T): void;
    registerOnChange(fn: ChangeFn<T | T[]>): void;
    registerOnTouched(fn: TouchFn): void;
    setDisabledState(isDisabled: boolean): void;
    selectOption(value: T): void;
    deselectOption(value: T): void;
    toggleSelect(value: T): void;
    isSelected(value: T): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnSelectComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnSelectComponent<any>, "brn-select, hlm-select", never, { "id": { "alias": "id"; "required": false; "isSignal": true; }; "multiple": { "alias": "multiple"; "required": false; "isSignal": true; }; "placeholder": { "alias": "placeholder"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; "dir": { "alias": "dir"; "required": false; "isSignal": true; }; "closeDelay": { "alias": "closeDelay"; "required": false; "isSignal": true; }; "open": { "alias": "open"; "required": false; "isSignal": true; }; "value": { "alias": "value"; "required": false; "isSignal": true; }; "compareWith": { "alias": "compareWith"; "required": false; "isSignal": true; }; }, { "open": "openChange"; "value": "valueChange"; }, ["selectLabel", "selectContent", "options"], ["label[hlmLabel],label[brnLabel]", "hlm-select-trigger,[brnSelectTrigger]", "*"], true, never>;
}
