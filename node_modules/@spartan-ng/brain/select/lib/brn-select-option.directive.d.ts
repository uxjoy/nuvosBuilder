import type { Highlightable } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { ElementRef } from '@angular/core';
import * as i0 from "@angular/core";
export declare class BrnSelectOptionDirective<T> implements Highlightable {
    protected readonly _select: import("@spartan-ng/brain/select").BrnSelectComponent<unknown>;
    protected readonly _content: import("@spartan-ng/brain/select").BrnSelectContentComponent<T>;
    readonly elementRef: ElementRef<any>;
    readonly id: import("@angular/core").InputSignal<string>;
    readonly value: import("@angular/core").InputSignal<T | undefined>;
    readonly _disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    get disabled(): boolean;
    readonly selected: import("@angular/core").Signal<boolean>;
    protected readonly _active: import("@angular/core").WritableSignal<boolean>;
    readonly checkedState: import("@angular/core").Signal<"checked" | "unchecked">;
    readonly dir: import("@angular/core").InputSignal<import("@spartan-ng/brain/select").BrnReadDirection>;
    select(): void;
    /** Get the label for this element which is required by the FocusableOption interface. */
    getLabel(): string;
    setActiveStyles(): void;
    setInactiveStyles(): void;
    protected activate(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnSelectOptionDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnSelectOptionDirective<any>, "[brnOption]", never, { "id": { "alias": "id"; "required": false; "isSignal": true; }; "value": { "alias": "value"; "required": false; "isSignal": true; }; "_disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
