import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ChangeFn, TouchFn } from '@spartan-ng/brain/forms';
import type { BrnSliderTrackDirective } from './brn-slider-track.directive';
import * as i0 from "@angular/core";
export declare class BrnSliderDirective implements ControlValueAccessor, OnInit {
    private readonly _changeDetectorRef;
    private readonly _elementRef;
    readonly value: import("@angular/core").ModelSignal<number>;
    readonly min: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    readonly max: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    readonly step: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    readonly _disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /** Whether we should show tick marks */
    readonly showTicks: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /** @internal */
    readonly ticks: import("@angular/core").Signal<any[]>;
    /** @internal */
    readonly disabled: import("@angular/core").WritableSignal<boolean>;
    /** @internal */
    readonly percentage: import("@angular/core").Signal<number>;
    /** @internal Store the on change callback */
    protected _onChange?: ChangeFn<number>;
    /** @internal Store the on touched callback */
    protected _onTouched?: TouchFn;
    /** @internal Store the track */
    readonly track: import("@angular/core").WritableSignal<BrnSliderTrackDirective | null>;
    ngOnInit(): void;
    registerOnChange(fn: (value: number) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: number): void;
    setValue(value: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnSliderDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnSliderDirective, "[brnSlider]", ["brnSlider"], { "value": { "alias": "value"; "required": false; "isSignal": true; }; "min": { "alias": "min"; "required": false; "isSignal": true; }; "max": { "alias": "max"; "required": false; "isSignal": true; }; "step": { "alias": "step"; "required": false; "isSignal": true; }; "_disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; "showTicks": { "alias": "showTicks"; "required": false; "isSignal": true; }; }, { "value": "valueChange"; }, never, never, true, never>;
}
