import { type Signal } from '@angular/core';
type BrnColumnVisibility = Record<string, boolean> | Record<string, {
    visible: boolean;
}>;
type AllColumnsPropertyType<T> = T extends Record<string, boolean> ? (keyof T)[] : T extends Record<string, infer R> ? (R extends {
    visible: boolean;
} ? {
    name: keyof T;
} & R : never)[] : never;
export declare class BrnColumnManager<T extends BrnColumnVisibility> {
    private readonly _initialColumnVisibility;
    private readonly _columnVisibility;
    readonly allColumns: AllColumnsPropertyType<T>;
    readonly columnVisibility: Signal<T>;
    readonly displayedColumns: Signal<(keyof T)[]>;
    constructor(initialColumnVisibility: T);
    readonly isColumnVisible: (columnName: string) => boolean;
    readonly isColumnDisabled: (columnName: string) => boolean;
    toggleVisibility(columnName: keyof T): void;
    setVisible(columnName: keyof T): void;
    setInvisible(columnName: keyof T): void;
    private createAllColumns;
    private isBooleanConfig;
}
export declare const useBrnColumnManager: <T extends BrnColumnVisibility>(initialColumnVisibility: T) => BrnColumnManager<T>;
export {};
