import { type OnInit, type Signal } from '@angular/core';
import * as i0 from "@angular/core";
export type PaginatorState = {
    currentPage: number;
    startIndex: number;
    endIndex: number;
    pageSize: number;
    totalPages: number;
    totalElements: number | null | undefined;
};
export type PaginatorContext = {
    $implicit: {
        state: Signal<PaginatorState>;
        incrementable: Signal<boolean>;
        decrementable: Signal<boolean>;
        increment: () => void;
        decrement: () => void;
    };
};
export declare class BrnPaginatorDirective implements OnInit {
    static ngTemplateContextGuard(_directive: BrnPaginatorDirective, _context: unknown): _context is PaginatorContext;
    private readonly _vcr;
    private readonly _template;
    private readonly _state;
    private readonly _decrementable;
    private readonly _incrementable;
    set totalElements(value: number | null | undefined);
    set currentPage(value: number);
    set pageSize(value: number);
    onStateChange?: (state: PaginatorState) => void;
    constructor();
    ngOnInit(): void;
    decrementPage(): void;
    incrementPage(): void;
    reset(): void;
    private calculateNewState;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnPaginatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnPaginatorDirective, "[brnPaginator]", ["brnPaginator"], { "totalElements": { "alias": "brnPaginatorTotalElements"; "required": false; }; "currentPage": { "alias": "brnPaginatorCurrentPage"; "required": false; }; "pageSize": { "alias": "brnPaginatorPageSize"; "required": false; }; "onStateChange": { "alias": "brnPaginatorOnStateChange"; "required": false; }; }, {}, never, never, true, never>;
    static ngAcceptInputType_currentPage: unknown;
    static ngAcceptInputType_pageSize: unknown;
}
