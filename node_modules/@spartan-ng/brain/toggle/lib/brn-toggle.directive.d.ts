import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class BrnToggleDirective<T> {
    private static _uniqueId;
    private readonly _changeDetector;
    /** The id of the toggle. */
    readonly id: import("@angular/core").InputSignal<string>;
    /** The value this toggle represents. */
    readonly value: import("@angular/core").InputSignal<T | undefined>;
    /** Whether the toggle is disabled. */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /** The current state of the toggle when not used in a group. */
    readonly state: import("@angular/core").ModelSignal<"on" | "off">;
    /** Whether the toggle is responds to click events. */
    readonly disableToggleClick: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /** Whether the toggle is in the on state. */
    protected readonly isOn: import("@angular/core").Signal<boolean>;
    /** The current state that reflects the group state or the model state. */
    protected readonly _state: import("@angular/core").Signal<"on" | "off">;
    toggle(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnToggleDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnToggleDirective<any>, "button[hlmToggle], button[brnToggle]", never, { "id": { "alias": "id"; "required": false; "isSignal": true; }; "value": { "alias": "value"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; "state": { "alias": "state"; "required": false; "isSignal": true; }; "disableToggleClick": { "alias": "disableToggleClick"; "required": false; "isSignal": true; }; }, { "state": "stateChange"; }, never, never, true, never>;
}
