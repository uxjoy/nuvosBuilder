import { BooleanInput } from '@angular/cdk/coercion';
import { ControlValueAccessor } from '@angular/forms';
import { ChangeFn, TouchFn } from '@spartan-ng/brain/forms';
import { BrnRadioChange, BrnRadioComponent } from './brn-radio.component';
import * as i0 from "@angular/core";
export declare const BRN_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: {
    provide: import("@angular/core").InjectionToken<readonly ControlValueAccessor[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export declare class BrnRadioGroupDirective<T = unknown> implements ControlValueAccessor {
    private static _nextUniqueId;
    protected onChange: ChangeFn<T>;
    protected onTouched: TouchFn;
    readonly name: import("@angular/core").InputSignal<string>;
    /**
     * The value of the selected radio button.
     */
    readonly value: import("@angular/core").ModelSignal<T | undefined>;
    /**
     * Whether the radio group is disabled.
     */
    disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * Whether the radio group should be required.
     */
    readonly required: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /**
     * The direction of the radio group.
     */
    readonly direction: import("@angular/core").InputSignal<"ltr" | "rtl" | null>;
    /**
     * Event emitted when the group value changes.
     */
    readonly change: import("@angular/core").OutputEmitterRef<BrnRadioChange<T>>;
    /**
     * The internal disabled state of the radio group. This could be switched to a linkedSignal when we can drop v18 support.
     * @internal
     */
    readonly disabledState: import("@angular/core").WritableSignal<boolean>;
    /**
     * Access the radio buttons within the group.
     * @internal
     */
    readonly radioButtons: import("@angular/core").Signal<readonly BrnRadioComponent<any>[]>;
    writeValue(value: T): void;
    registerOnChange(fn: ChangeFn<T>): void;
    registerOnTouched(fn: TouchFn): void;
    setDisabledState(isDisabled: boolean): void;
    /**
     * Select a radio button.
     * @internal
     */
    select(radioButton: BrnRadioComponent<T>, value: T): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnRadioGroupDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnRadioGroupDirective<any>, "[brnRadioGroup]", never, { "name": { "alias": "name"; "required": false; "isSignal": true; }; "value": { "alias": "value"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; "required": { "alias": "required"; "required": false; "isSignal": true; }; "direction": { "alias": "direction"; "required": false; "isSignal": true; }; }, { "value": "valueChange"; "change": "change"; }, ["radioButtons"], never, true, never>;
}
