import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { ControlValueAccessor } from '@angular/forms';
import { ChangeFn, TouchFn } from '@spartan-ng/brain/forms';
import * as i0 from "@angular/core";
export declare const BRN_INPUT_OTP_VALUE_ACCESSOR: {
    provide: import("@angular/core").InjectionToken<readonly ControlValueAccessor[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export type InputMode = 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';
export declare class BrnInputOtpComponent implements ControlValueAccessor {
    /** Whether the input has focus. */
    protected readonly focused: import("@angular/core").WritableSignal<boolean>;
    readonly hostStyles: import("@angular/core").InputSignal<string>;
    readonly inputStyles: import("@angular/core").InputSignal<string>;
    readonly containerStyles: import("@angular/core").InputSignal<string>;
    /** Determine if the date picker is disabled. */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /** The number of slots. */
    readonly maxLength: import("@angular/core").InputSignalWithTransform<number, NumberInput>;
    /** Virtual keyboard appearance on mobile */
    readonly inputMode: import("@angular/core").InputSignal<InputMode>;
    readonly inputClass: import("@angular/core").InputSignal<string>;
    /**
     * Defines how the pasted text should be transformed before saving to model/form.
     * Allows pasting text which contains extra characters like spaces, dashes, etc. and are longer than the maxLength.
     *
     * "XXX-XXX": (pastedText) => pastedText.replaceAll('-', '')
     * "XXX XXX": (pastedText) => pastedText.replaceAll(/\s+/g, '')
     */
    readonly transformPaste: import("@angular/core").InputSignal<(pastedText: string, maxLength: number) => string>;
    /** The value controlling the input */
    readonly value: import("@angular/core").ModelSignal<string>;
    readonly context: import("@angular/core").Signal<{
        char: string | null;
        isActive: boolean;
        hasFakeCaret: boolean;
    }[]>;
    /** Emitted when the input is complete, triggered through input or paste.  */
    readonly completed: import("@angular/core").OutputEmitterRef<string>;
    protected readonly state: import("@angular/core").Signal<{
        disabled: import("@angular/core").WritableSignal<boolean>;
    }>;
    protected _onChange?: ChangeFn<string>;
    protected _onTouched?: TouchFn;
    protected onInputChange(event: Event): void;
    protected onPaste(event: ClipboardEvent): void;
    /** CONTROL VALUE ACCESSOR */
    writeValue(value: string | null): void;
    registerOnChange(fn: ChangeFn<string>): void;
    registerOnTouched(fn: TouchFn): void;
    setDisabledState(isDisabled: boolean): void;
    private isCompleted;
    private updateValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnInputOtpComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnInputOtpComponent, "brn-input-otp", never, { "hostStyles": { "alias": "hostStyles"; "required": false; "isSignal": true; }; "inputStyles": { "alias": "inputStyles"; "required": false; "isSignal": true; }; "containerStyles": { "alias": "containerStyles"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; "maxLength": { "alias": "maxLength"; "required": true; "isSignal": true; }; "inputMode": { "alias": "inputMode"; "required": false; "isSignal": true; }; "inputClass": { "alias": "inputClass"; "required": false; "isSignal": true; }; "transformPaste": { "alias": "transformPaste"; "required": false; "isSignal": true; }; "value": { "alias": "value"; "required": false; "isSignal": true; }; }, { "value": "valueChange"; "completed": "completed"; }, never, ["*"], true, never>;
}
