import * as i0 from '@angular/core';
import { InjectionToken, inject, Component, input, numberAttribute, computed, NgModule } from '@angular/core';

const BrnProgressToken = new InjectionToken('BrnProgressComponent');
function provideBrnProgress(progress) {
    return { provide: BrnProgressToken, useExisting: progress };
}
function injectBrnProgress() {
    return inject(BrnProgressToken);
}

class BrnProgressIndicatorComponent {
    progress = injectBrnProgress();
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnProgressIndicatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "19.2.8", type: BrnProgressIndicatorComponent, isStandalone: true, selector: "brn-progress-indicator", host: { properties: { "attr.data-state": "progress.state()", "attr.data-value": "progress.value()", "attr.data-max": "progress.max()" } }, ngImport: i0, template: '', isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnProgressIndicatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-progress-indicator',
                    standalone: true,
                    template: '',
                    host: {
                        '[attr.data-state]': 'progress.state()',
                        '[attr.data-value]': 'progress.value()',
                        '[attr.data-max]': 'progress.max()',
                    },
                }]
        }] });

class BrnProgressComponent {
    value = input(undefined, {
        transform: (value) => (value === undefined || value === null ? undefined : Number(value)),
    });
    max = input(100, { transform: numberAttribute });
    getValueLabel = input((value, max) => `${Math.round((value / max) * 100)}%`);
    label = computed(() => {
        const value = this.value();
        return value === null || value === undefined ? undefined : this.getValueLabel()(value, this.max());
    });
    state = computed(() => {
        const value = this.value();
        const max = this.max();
        return value === null || value === undefined ? 'indeterminate' : value === max ? 'complete' : 'loading';
    });
    ngOnChanges(changes) {
        if ('value' in changes || 'max' in changes) {
            this.validate();
        }
    }
    validate() {
        // validate that the value is within the bounds of the max
        const value = this.value();
        const max = this.max();
        if (value === null || value === undefined) {
            return;
        }
        if (value > max || value < 0) {
            throw Error('Value must be 0 or greater and less or equal to max');
        }
        if (max < 0) {
            throw Error('max must be greater than 0');
        }
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnProgressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "19.2.8", type: BrnProgressComponent, isStandalone: true, selector: "brn-progress", inputs: { value: { classPropertyName: "value", publicName: "value", isSignal: true, isRequired: false, transformFunction: null }, max: { classPropertyName: "max", publicName: "max", isSignal: true, isRequired: false, transformFunction: null }, getValueLabel: { classPropertyName: "getValueLabel", publicName: "getValueLabel", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "role": "progressbar" }, properties: { "attr.aria-valuemax": "max()", "attr.aria-valuemin": "0", "attr.aria-valuenow": "value()", "attr.aria-valuetext": "label()", "attr.data-state": "state()", "attr.data-value": "value()", "attr.data-max": "max()" } }, providers: [provideBrnProgress(BrnProgressComponent)], exportAs: ["brnProgress"], usesOnChanges: true, ngImport: i0, template: '<ng-content/>', isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnProgressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-progress',
                    standalone: true,
                    template: '<ng-content/>',
                    exportAs: 'brnProgress',
                    providers: [provideBrnProgress(BrnProgressComponent)],
                    host: {
                        role: 'progressbar',
                        '[attr.aria-valuemax]': 'max()',
                        '[attr.aria-valuemin]': '0',
                        '[attr.aria-valuenow]': 'value()',
                        '[attr.aria-valuetext]': 'label()',
                        '[attr.data-state]': 'state()',
                        '[attr.data-value]': 'value()',
                        '[attr.data-max]': 'max()',
                    },
                }]
        }] });

const BrnProgressImports = [BrnProgressComponent, BrnProgressIndicatorComponent];
class BrnProgressModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.8", ngImport: i0, type: BrnProgressModule, imports: [BrnProgressComponent, BrnProgressIndicatorComponent], exports: [BrnProgressComponent, BrnProgressIndicatorComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnProgressModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnProgressModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...BrnProgressImports],
                    exports: [...BrnProgressImports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BrnProgressComponent, BrnProgressImports, BrnProgressIndicatorComponent, BrnProgressModule, injectBrnProgress };
//# sourceMappingURL=spartan-ng-brain-progress.mjs.map
