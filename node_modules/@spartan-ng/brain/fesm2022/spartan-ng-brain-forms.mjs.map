{"version":3,"file":"spartan-ng-brain-forms.mjs","sources":["../../../../libs/brain/forms/src/lib/error-options.ts","../../../../libs/brain/forms/src/lib/error-state-tracker.ts","../../../../libs/brain/forms/src/spartan-ng-brain-forms.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport type { AbstractControl, FormGroupDirective, NgForm } from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n\tisInvalid(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n\t\treturn !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n\t}\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n\tisInvalid(control: AbstractControl | null, form: FormGroupDirective | NgForm | null): boolean {\n\t\treturn !!(control && control.invalid && (control.touched || (form && form.submitted)));\n\t}\n}\n","import { signal } from '@angular/core';\nimport type { AbstractControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport type { ErrorStateMatcher } from './error-options';\n\nexport class ErrorStateTracker {\n\t/** Whether the tracker is currently in an error state. */\n\tpublic readonly errorState = signal(false);\n\n\t/** User-defined matcher for the error state. */\n\tpublic matcher: ErrorStateMatcher | null = null;\n\n\tconstructor(\n\t\tprivate readonly _defaultMatcher: ErrorStateMatcher | null,\n\t\tpublic ngControl: NgControl | null,\n\t\tprivate readonly _parentFormGroup: FormGroupDirective | null,\n\t\tprivate readonly _parentForm: NgForm | null,\n\t) {}\n\n\t/** Updates the error state based on the provided error state matcher. */\n\tupdateErrorState() {\n\t\tconst oldState = this.errorState();\n\t\tconst parent = this._parentFormGroup || this._parentForm;\n\t\tconst matcher = this.matcher || this._defaultMatcher;\n\t\tconst control = this.ngControl ? (this.ngControl.control as AbstractControl) : null;\n\t\tconst newState = matcher?.isInvalid(control, parent) ?? false;\n\n\t\tif (newState !== oldState) {\n\t\t\tthis.errorState.set(newState);\n\t\t}\n\t}\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;AAGA;MAEa,4BAA4B,CAAA;IACxC,SAAS,CAAC,OAA+B,EAAE,IAAwC,EAAA;QAClF,OAAO,CAAC,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;0HAFzE,4BAA4B,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA;8HAA5B,4BAA4B,EAAA,CAAA;;2FAA5B,4BAA4B,EAAA,UAAA,EAAA,CAAA;kBADxC;;AAOD;MAEa,iBAAiB,CAAA;IAC7B,SAAS,CAAC,OAA+B,EAAE,IAAwC,EAAA;QAClF,OAAO,CAAC,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,KAAK,OAAO,CAAC,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;;0HAF3E,iBAAiB,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,UAAA,EAAA,CAAA;AAAjB,uBAAA,OAAA,KAAA,GAAA,EAAA,CAAA,qBAAA,CAAA,EAAA,UAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EAAA,iBAAiB,cADJ,MAAM,EAAA,CAAA;;2FACnB,iBAAiB,EAAA,UAAA,EAAA,CAAA;kBAD7B,UAAU;mBAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;MCRrB,iBAAiB,CAAA;AAQX,IAAA,eAAA;AACV,IAAA,SAAA;AACU,IAAA,gBAAA;AACA,IAAA,WAAA;;AATF,IAAA,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC;;IAGnC,OAAO,GAA6B,IAAI;AAE/C,IAAA,WAAA,CACkB,eAAyC,EACnD,SAA2B,EACjB,gBAA2C,EAC3C,WAA0B,EAAA;QAH1B,IAAe,CAAA,eAAA,GAAf,eAAe;QACzB,IAAS,CAAA,SAAA,GAAT,SAAS;QACC,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB;QAChB,IAAW,CAAA,WAAA,GAAX,WAAW;;;IAI7B,gBAAgB,GAAA;AACf,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,EAAE;QAClC,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,WAAW;QACxD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,eAAe;AACpD,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,GAAI,IAAI,CAAC,SAAS,CAAC,OAA2B,GAAG,IAAI;AACnF,QAAA,MAAM,QAAQ,GAAG,OAAO,EAAE,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,KAAK;AAE7D,QAAA,IAAI,QAAQ,KAAK,QAAQ,EAAE;AAC1B,YAAA,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC;;;AAG/B;;AC9BD;;AAEG;;;;"}