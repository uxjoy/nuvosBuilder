import * as i0 from '@angular/core';
import { Directive, inject, ElementRef, input, effect, untracked, numberAttribute, forwardRef, ViewEncapsulation, ChangeDetectionStrategy, Component, NgModule } from '@angular/core';
import { BrnDialogCloseDirective, BrnDialogContentDirective, BrnDialogTriggerDirective, BrnDialogComponent, provideBrnDialogDefaultOptions } from '@spartan-ng/brain/dialog';
import { provideExposesStateProviderExisting } from '@spartan-ng/brain/core';

class BrnPopoverCloseDirective extends BrnDialogCloseDirective {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverCloseDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.2.8", type: BrnPopoverCloseDirective, isStandalone: true, selector: "button[brnPopoverClose]", usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnPopoverClose]',
                    standalone: true,
                }]
        }] });

class BrnPopoverContentDirective extends BrnDialogContentDirective {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverContentDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.2.8", type: BrnPopoverContentDirective, isStandalone: true, selector: "[brnPopoverContent]", providers: [provideExposesStateProviderExisting((() => BrnPopoverContentDirective))], usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnPopoverContent]',
                    standalone: true,
                    providers: [provideExposesStateProviderExisting((() => BrnPopoverContentDirective))],
                }]
        }] });

class BrnPopoverTriggerDirective extends BrnDialogTriggerDirective {
    _host = inject(ElementRef, { host: true });
    brnPopoverTriggerFor = input(undefined, {
        alias: 'brnPopoverTriggerFor',
    });
    constructor() {
        super();
        if (!this._brnDialog)
            return;
        this._brnDialog.mutableAttachTo().set(this._host.nativeElement);
        this._brnDialog.mutableCloseOnOutsidePointerEvents().set(true);
        effect(() => {
            const brnDialog = this.brnPopoverTriggerFor();
            untracked(() => {
                if (!brnDialog)
                    return;
                brnDialog.mutableAttachTo().set(this._host.nativeElement);
                brnDialog.mutableCloseOnOutsidePointerEvents().set(true);
                this.mutableBrnDialogTriggerFor().set(brnDialog);
            });
        });
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "19.2.8", type: BrnPopoverTriggerDirective, isStandalone: true, selector: "button[brnPopoverTrigger],button[brnPopoverTriggerFor]", inputs: { brnPopoverTriggerFor: { classPropertyName: "brnPopoverTriggerFor", publicName: "brnPopoverTriggerFor", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "aria-haspopup": "dialog" }, properties: { "id": "id()", "attr.aria-expanded": "state() === 'open' ? 'true': 'false'", "attr.data-state": "state()", "attr.aria-controls": "dialogId" } }, usesInheritance: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnPopoverTrigger],button[brnPopoverTriggerFor]',
                    standalone: true,
                    host: {
                        '[id]': 'id()',
                        'aria-haspopup': 'dialog',
                        '[attr.aria-expanded]': "state() === 'open' ? 'true': 'false'",
                        '[attr.data-state]': 'state()',
                        '[attr.aria-controls]': 'dialogId',
                    },
                }]
        }], ctorParameters: () => [] });

const BRN_POPOVER_DIALOG_DEFAULT_OPTIONS = {
    hasBackdrop: false,
    scrollStrategy: 'reposition',
};
class BrnPopoverComponent extends BrnDialogComponent {
    align = input('center');
    sideOffset = input(0, { transform: numberAttribute });
    constructor() {
        super();
        this.setAriaDescribedBy('');
        this.setAriaLabelledBy('');
        effect(() => {
            const align = this.align();
            untracked(() => {
                this.mutableAttachPositions().set([
                    {
                        originX: align,
                        originY: 'bottom',
                        overlayX: align,
                        overlayY: 'top',
                    },
                    {
                        originX: align,
                        originY: 'top',
                        overlayX: align,
                        overlayY: 'bottom',
                    },
                ]);
            });
            untracked(() => {
                this.applySideOffset(this.sideOffset());
            });
        });
        effect(() => {
            const sideOffset = this.sideOffset();
            untracked(() => {
                this.applySideOffset(sideOffset);
            });
        });
    }
    applySideOffset(sideOffset) {
        this.mutableAttachPositions().update((positions) => positions.map((position) => ({
            ...position,
            offsetY: position.originY === 'top' ? -sideOffset : sideOffset,
        })));
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "19.2.8", type: BrnPopoverComponent, isStandalone: true, selector: "brn-popover", inputs: { align: { classPropertyName: "align", publicName: "align", isSignal: true, isRequired: false, transformFunction: null }, sideOffset: { classPropertyName: "sideOffset", publicName: "sideOffset", isSignal: true, isRequired: false, transformFunction: null } }, providers: [
            {
                provide: BrnDialogComponent,
                useExisting: forwardRef((() => BrnPopoverComponent)),
            },
            provideBrnDialogDefaultOptions(BRN_POPOVER_DIALOG_DEFAULT_OPTIONS),
        ], exportAs: ["brnPopover"], usesInheritance: true, ngImport: i0, template: `
		<ng-content />
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-popover',
                    standalone: true,
                    template: `
		<ng-content />
	`,
                    providers: [
                        {
                            provide: BrnDialogComponent,
                            useExisting: forwardRef((() => BrnPopoverComponent)),
                        },
                        provideBrnDialogDefaultOptions(BRN_POPOVER_DIALOG_DEFAULT_OPTIONS),
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'brnPopover',
                }]
        }], ctorParameters: () => [] });

const BrnPopoverImports = [
    BrnPopoverComponent,
    BrnPopoverTriggerDirective,
    BrnPopoverCloseDirective,
    BrnPopoverContentDirective,
];
class BrnPopoverModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverModule, imports: [BrnPopoverComponent,
            BrnPopoverTriggerDirective,
            BrnPopoverCloseDirective,
            BrnPopoverContentDirective], exports: [BrnPopoverComponent,
            BrnPopoverTriggerDirective,
            BrnPopoverCloseDirective,
            BrnPopoverContentDirective] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnPopoverModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...BrnPopoverImports],
                    exports: [...BrnPopoverImports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BRN_POPOVER_DIALOG_DEFAULT_OPTIONS, BrnPopoverCloseDirective, BrnPopoverComponent, BrnPopoverContentDirective, BrnPopoverImports, BrnPopoverModule, BrnPopoverTriggerDirective };
//# sourceMappingURL=spartan-ng-brain-popover.mjs.map
