import * as i0 from '@angular/core';
import { inject, ChangeDetectorRef, input, booleanAttribute, model, computed, Directive, NgModule } from '@angular/core';

class BrnToggleDirective {
    static _uniqueId = 0;
    _changeDetector = inject(ChangeDetectorRef);
    /** The id of the toggle. */
    id = input(`brn-toggle-${BrnToggleDirective._uniqueId++}`);
    /** The value this toggle represents. */
    value = input();
    /** Whether the toggle is disabled. */
    disabled = input(false, {
        transform: booleanAttribute,
    });
    /** The current state of the toggle when not used in a group. */
    state = model('off');
    /** Whether the toggle is responds to click events. */
    disableToggleClick = input(false, {
        transform: booleanAttribute,
    });
    /** Whether the toggle is in the on state. */
    isOn = computed(() => this._state() === 'on');
    /** The current state that reflects the group state or the model state. */
    _state = computed(() => {
        return this.state();
    });
    toggle() {
        if (this.disableToggleClick())
            return;
        this.state.set(this.isOn() ? 'off' : 'on');
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnToggleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "19.2.8", type: BrnToggleDirective, isStandalone: true, selector: "button[hlmToggle], button[brnToggle]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, value: { classPropertyName: "value", publicName: "value", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null }, state: { classPropertyName: "state", publicName: "state", isSignal: true, isRequired: false, transformFunction: null }, disableToggleClick: { classPropertyName: "disableToggleClick", publicName: "disableToggleClick", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { state: "stateChange" }, host: { listeners: { "click": "toggle()" }, properties: { "id": "id()", "attr.disabled": "disabled() ? true : null", "attr.data-disabled": "disabled() ? true : null", "attr.data-state": "_state()", "attr.aria-pressed": "isOn()" } }, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnToggleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[hlmToggle], button[brnToggle]',
                    standalone: true,
                    host: {
                        '[id]': 'id()',
                        '[attr.disabled]': 'disabled() ? true : null',
                        '[attr.data-disabled]': 'disabled() ? true : null',
                        '[attr.data-state]': '_state()',
                        '[attr.aria-pressed]': 'isOn()',
                        '(click)': 'toggle()',
                    },
                }]
        }] });

class BrnToggleModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.8", ngImport: i0, type: BrnToggleModule, imports: [BrnToggleDirective], exports: [BrnToggleDirective] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnToggleModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnToggleModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [BrnToggleDirective],
                    exports: [BrnToggleDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BrnToggleDirective, BrnToggleModule };
//# sourceMappingURL=spartan-ng-brain-toggle.mjs.map
