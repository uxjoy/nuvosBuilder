import * as i0 from '@angular/core';
import { signal, model, input, booleanAttribute, ChangeDetectionStrategy, Component, inject, ElementRef, PLATFORM_ID, effect, untracked, Directive, NgModule } from '@angular/core';
import { isPlatformServer } from '@angular/common';

let collapsibleContentIdSequence = 0;
class BrnCollapsibleComponent {
    contentId = signal(`brn-collapsible-content-${collapsibleContentIdSequence++}`);
    /**
     * The expanded or collapsed state of the collapsible component.
     */
    expanded = model(false);
    /**
     * The disabled state of the collapsible component.
     */
    disabled = input(false, { transform: booleanAttribute });
    /**
     * Toggles the expanded state of the collapsible component.
     */
    toggle() {
        this.expanded.update((expanded) => !expanded);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "19.2.8", type: BrnCollapsibleComponent, isStandalone: true, selector: "brn-collapsible", inputs: { expanded: { classPropertyName: "expanded", publicName: "expanded", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { expanded: "expandedChange" }, host: { properties: { "attr.data-state": "expanded() ? \"open\" : \"closed\"", "attr.disabled": "disabled() ? true : undefined" } }, ngImport: i0, template: `
		<ng-content />
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-collapsible',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'expanded() ? "open" : "closed"',
                        '[attr.disabled]': 'disabled() ? true : undefined',
                    },
                    template: `
		<ng-content />
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

class BrnCollapsibleContentComponent {
    collapsible = inject(BrnCollapsibleComponent, { optional: true });
    _elementRef = inject(ElementRef);
    _platformId = inject(PLATFORM_ID);
    /**
     * The id of the collapsible content element.
     */
    id = input();
    width = signal(null);
    height = signal(null);
    constructor() {
        if (!this.collapsible) {
            throw Error('Collapsible trigger directive can only be used inside a brn-collapsible element.');
        }
        effect(() => {
            const id = this.id();
            const collapsible = this.collapsible;
            if (!id || !collapsible)
                return;
            untracked(() => collapsible.contentId.set(id));
        });
    }
    ngOnInit() {
        if (isPlatformServer(this._platformId)) {
            return;
        }
        // ensure the element is not hidden when measuring its size
        this._elementRef.nativeElement.hidden = false;
        const { width, height } = this._elementRef.nativeElement.getBoundingClientRect();
        this.width.set(width);
        this.height.set(height);
        // we force the element to be hidden again if collapsed after measuring its size
        // this is handled by the host binding, but it can cause a flicker if we don't do this here manually
        this._elementRef.nativeElement.hidden = this.collapsible?.expanded() ?? false;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "19.2.8", type: BrnCollapsibleContentComponent, isStandalone: true, selector: "brn-collapsible-content", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "hidden": "!collapsible?.expanded()", "attr.data-state": "collapsible?.expanded() ? \"open\" : \"closed\"", "id": "collapsible?.contentId()", "style.--brn-collapsible-content-width.px": "width()", "style.--brn-collapsible-content-height.px": "height()" } }, ngImport: i0, template: `
		<ng-content />
	`, isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-collapsible-content',
                    standalone: true,
                    host: {
                        '[hidden]': '!collapsible?.expanded()',
                        '[attr.data-state]': 'collapsible?.expanded() ? "open" : "closed"',
                        '[id]': 'collapsible?.contentId()',
                        '[style.--brn-collapsible-content-width.px]': 'width()',
                        '[style.--brn-collapsible-content-height.px]': 'height()',
                    },
                    template: `
		<ng-content />
	`,
                }]
        }], ctorParameters: () => [] });

class BrnCollapsibleTriggerDirective {
    collapsible = inject(BrnCollapsibleComponent, { optional: true });
    constructor() {
        if (!this.collapsible) {
            throw Error('Collapsible trigger directive can only be used inside a brn-collapsible element.');
        }
    }
    toggle() {
        this.collapsible?.toggle();
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "19.2.8", type: BrnCollapsibleTriggerDirective, isStandalone: true, selector: "button[brnCollapsibleTrigger]", host: { listeners: { "click": "toggle()" }, properties: { "attr.data-state": "collapsible?.expanded() ? \"open\" : \"closed\"", "attr.disabled": "collapsible?.disabled() ? true : undefined", "attr.aria-expanded": "collapsible?.expanded()", "attr.aria-controls": "collapsible?.contentId()" } }, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnCollapsibleTrigger]',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'collapsible?.expanded() ? "open" : "closed"',
                        '[attr.disabled]': 'collapsible?.disabled() ? true : undefined',
                        '[attr.aria-expanded]': 'collapsible?.expanded()',
                        '[attr.aria-controls]': 'collapsible?.contentId()',
                        '(click)': 'toggle()',
                    },
                }]
        }], ctorParameters: () => [] });

const BrnCollapsibleImports = [
    BrnCollapsibleComponent,
    BrnCollapsibleTriggerDirective,
    BrnCollapsibleContentComponent,
];
class BrnCollapsibleModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleModule, imports: [BrnCollapsibleComponent,
            BrnCollapsibleTriggerDirective,
            BrnCollapsibleContentComponent], exports: [BrnCollapsibleComponent,
            BrnCollapsibleTriggerDirective,
            BrnCollapsibleContentComponent] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.2.8", ngImport: i0, type: BrnCollapsibleModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...BrnCollapsibleImports],
                    exports: [...BrnCollapsibleImports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BrnCollapsibleComponent, BrnCollapsibleContentComponent, BrnCollapsibleImports, BrnCollapsibleModule, BrnCollapsibleTriggerDirective };
//# sourceMappingURL=spartan-ng-brain-collapsible.mjs.map
