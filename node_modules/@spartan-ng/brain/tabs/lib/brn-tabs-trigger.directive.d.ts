import { ElementRef } from '@angular/core';
import * as i0 from "@angular/core";
export declare class BrnTabsContentDirective {
    private readonly _root;
    private readonly _elementRef;
    readonly contentFor: import("@angular/core").InputSignal<string>;
    protected readonly _isSelected: import("@angular/core").Signal<boolean>;
    protected contentId: import("@angular/core").Signal<string>;
    protected labelId: import("@angular/core").Signal<string>;
    constructor();
    focus(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnTabsContentDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnTabsContentDirective, "[brnTabsContent]", ["brnTabsContent"], { "contentFor": { "alias": "brnTabsContent"; "required": true; "isSignal": true; }; }, {}, never, never, true, never>;
}
export type BrnTabsOrientation = 'horizontal' | 'vertical';
export type BrnTabsDirection = 'ltr' | 'rtl';
export type BrnActivationMode = 'automatic' | 'manual';
export declare class BrnTabsDirective {
    readonly orientation: import("@angular/core").InputSignal<BrnTabsOrientation>;
    /** internal **/
    $orientation: import("@angular/core").InputSignal<BrnTabsOrientation>;
    readonly direction: import("@angular/core").InputSignal<BrnTabsDirection>;
    /** internal **/
    $direction: import("@angular/core").InputSignal<BrnTabsDirection>;
    readonly _activeTab: import("@angular/core").ModelSignal<string | undefined>;
    /** internal **/
    $activeTab: import("@angular/core").Signal<string | undefined>;
    readonly activationMode: import("@angular/core").InputSignal<BrnActivationMode>;
    /** internal **/
    $activationMode: import("@angular/core").InputSignal<BrnActivationMode>;
    readonly tabActivated: import("@angular/core").OutputEmitterRef<string>;
    private readonly _tabs;
    readonly $tabs: import("@angular/core").Signal<{
        [key: string]: {
            trigger: BrnTabsTriggerDirective;
            content: BrnTabsContentDirective;
        };
    }>;
    registerTrigger(key: string, trigger: BrnTabsTriggerDirective): void;
    registerContent(key: string, content: BrnTabsContentDirective): void;
    emitTabActivated(key: string): void;
    setActiveTab(key: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnTabsDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnTabsDirective, "[brnTabs]", ["brnTabs"], { "orientation": { "alias": "orientation"; "required": false; "isSignal": true; }; "direction": { "alias": "direction"; "required": false; "isSignal": true; }; "_activeTab": { "alias": "brnTabs"; "required": false; "isSignal": true; }; "activationMode": { "alias": "activationMode"; "required": false; "isSignal": true; }; }, { "_activeTab": "brnTabsChange"; "tabActivated": "tabActivated"; }, never, never, true, never>;
}
export declare class BrnTabsTriggerDirective {
    readonly elementRef: ElementRef<any>;
    private readonly _root;
    protected readonly _orientation: import("@angular/core").InputSignal<BrnTabsOrientation>;
    readonly triggerFor: import("@angular/core").InputSignal<string>;
    readonly selected: import("@angular/core").Signal<boolean>;
    protected readonly contentId: import("@angular/core").Signal<string>;
    protected readonly labelId: import("@angular/core").Signal<string>;
    disabled: boolean;
    constructor();
    focus(): void;
    activate(): void;
    get key(): string | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnTabsTriggerDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnTabsTriggerDirective, "button[brnTabsTrigger]", ["brnTabsTrigger"], { "triggerFor": { "alias": "brnTabsTrigger"; "required": true; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; }; }, {}, never, never, true, never>;
}
