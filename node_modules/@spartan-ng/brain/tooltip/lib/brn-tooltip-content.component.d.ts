import { ElementRef, type OnDestroy, type TemplateRef } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Internal component that wraps the tooltip's content.
 * @docs-private
 */
export declare class BrnTooltipContentComponent implements OnDestroy {
    private readonly _cdr;
    private readonly _isBrowser;
    private readonly _renderer2;
    protected readonly _contentHovered: import("@angular/core").WritableSignal<boolean>;
    readonly _tooltipClasses: import("@angular/core").WritableSignal<string>;
    readonly side: import("@angular/core").WritableSignal<string>;
    /** Message to display in the tooltip */
    content: string | TemplateRef<unknown> | null;
    /** The timeout ID of any current timer set to show the tooltip */
    private _showTimeoutId;
    /** The timeout ID of any current timer set to hide the tooltip */
    private _hideTimeoutId;
    /** The timeout ID of any current timer set to animate the tooltip */
    private _animateTimeoutId;
    /** Element that caused the tooltip to open. */
    _triggerElement?: HTMLElement;
    /** Amount of milliseconds to delay the closing sequence. */
    _mouseLeaveHideDelay: number;
    /** Amount of milliseconds of closing animation. */
    _exitAnimationDuration: number;
    /** Reference to the internal tooltip element. */
    _tooltip: import("@angular/core").Signal<ElementRef<any> | undefined>;
    /** Whether interactions on the page should close the tooltip */
    private _closeOnInteraction;
    /** Whether the tooltip is currently visible. */
    private _isVisible;
    /** Subject for notifying that the tooltip has been hidden from the view */
    private readonly _onHide;
    readonly afterHidden: import("rxjs").Observable<void>;
    /**
     * Shows the tooltip with originating from the provided origin
     * @param delay Amount of milliseconds to the delay showing the tooltip.
     */
    show(delay: number): void;
    /**
     * Begins to hide the tooltip after the provided delay in ms.
     * @param delay Amount of milliseconds to delay hiding the tooltip.
     * @param exitAnimationDuration Time before hiding to finish animation
     * */
    hide(delay: number, exitAnimationDuration: number): void;
    /** Whether the tooltip is being displayed. */
    isVisible(): boolean;
    ngOnDestroy(): void;
    _isTypeOfString(content: unknown): content is string;
    /**
     * Interactions on the HTML body should close the tooltip immediately as defined in the
     * material design spec.
     * https://material.io/design/components/tooltips.html#behavior
     */
    _handleBodyInteraction(): void;
    /**
     * Marks that the tooltip needs to be checked in the next change detection run.
     * Mainly used for rendering the initial text before positioning a tooltip, which
     * can be problematic in components with OnPush change detection.
     */
    _markForCheck(): void;
    _handleMouseLeave({ relatedTarget }: MouseEvent): void;
    /** Cancels any pending animation sequences. */
    _cancelPendingAnimations(): void;
    private _finalize;
    /** Toggles the visibility of the tooltip element. */
    private _toggleVisibility;
    private _toggleDataAttributes;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnTooltipContentComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnTooltipContentComponent, "brn-tooltip-content", never, {}, {}, never, never, true, never>;
}
