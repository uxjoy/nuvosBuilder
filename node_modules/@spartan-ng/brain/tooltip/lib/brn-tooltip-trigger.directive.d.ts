import { type ConnectedPosition, type OriginConnectionPosition, type OverlayConnectionPosition, type ScrollStrategy } from '@angular/cdk/overlay';
import { type AfterViewInit, InjectionToken, type OnDestroy, type Provider, type TemplateRef } from '@angular/core';
import * as i0 from "@angular/core";
export type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';
export type TooltipTouchGestures = 'auto' | 'on' | 'off';
/** Time in ms to throttle repositioning after scroll events. */
export declare const SCROLL_THROTTLE_MS = 20;
export declare function getBrnTooltipInvalidPositionError(position: string): Error;
/** Injection token that determines the scroll handling while a tooltip is visible. */
export declare const BRN_TOOLTIP_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
export declare const BRN_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER: Provider;
export declare class BrnTooltipTriggerDirective implements OnDestroy, AfterViewInit {
    private readonly _tooltipDirective;
    private readonly _tooltipComponent;
    private readonly _cssClassPrefix;
    private readonly _destroyed;
    private readonly _passiveListeners;
    private readonly _defaultOptions;
    private readonly _overlay;
    private readonly _elementRef;
    private readonly _scrollDispatcher;
    private readonly _viewContainerRef;
    private readonly _ngZone;
    private readonly _platform;
    private readonly _ariaDescriber;
    private readonly _focusMonitor;
    private readonly _dir;
    private readonly _scrollStrategy;
    private readonly _document;
    private _portal?;
    private _viewInitialized;
    private _pointerExitEventsInitialized;
    private readonly _viewportMargin;
    private _currentPosition?;
    private _touchstartTimeout?;
    private _overlayRef;
    private _tooltipInstance;
    /** Allows the user to define the position of the tooltip relative to the parent element */
    readonly position: import("@angular/core").InputSignal<TooltipPosition>;
    /**
     * Whether tooltip should be relative to the click or touch origin
     * instead of outside the element bounding box.
     */
    readonly positionAtOrigin: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /** Disables the display of the tooltip. */
    readonly brnTooltipDisabled: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    /** The default delay in ms before showing the tooltip after show is called */
    readonly showDelay: import("@angular/core").InputSignalWithTransform<number, unknown>;
    /** The default delay in ms before hiding the tooltip after hide is called */
    readonly hideDelay: import("@angular/core").InputSignalWithTransform<number, unknown>;
    /** The default duration in ms that exit animation takes before hiding */
    readonly exitAnimationDuration: import("@angular/core").InputSignalWithTransform<number, unknown>;
    /** The default delay in ms before hiding the tooltip after hide is called */
    readonly _tooltipContentClasses: import("@angular/core").InputSignal<string>;
    readonly tooltipContentClasses: import("@angular/core").Signal<import("@angular/core").WritableSignal<string>>;
    /**
     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive
     * uses a long press gesture to show and hide, however it can conflict with the native browser
     * gestures. To work around the conflict, Angular Material disables native gestures on the
     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable
     * elements). The different values for this option configure the touch event handling as follows:
     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native
     *   browser gestures on particular elements. In particular, it allows text selection on inputs
     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.
     * - `on` - Enables touch gestures for all elements and disables native
     *   browser gestures with no exceptions.
     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from
     *   showing on touch devices.
     */
    readonly touchGestures: import("@angular/core").InputSignal<TooltipTouchGestures>;
    /** The message to be used to describe the aria in the tooltip */
    readonly _ariaDescribedBy: import("@angular/core").InputSignal<string>;
    readonly ariaDescribedBy: import("@angular/core").Signal<import("@angular/core").WritableSignal<string>>;
    readonly ariaDescribedByPrevious: import("@angular/core").Signal<import("@angular/core").WritableSignal<string>>;
    /** The content to be displayed in the tooltip */
    readonly brnTooltipTrigger: import("@angular/core").InputSignal<string | TemplateRef<unknown> | null>;
    readonly brnTooltipTriggerState: import("@angular/core").Signal<string | TemplateRef<unknown> | null>;
    constructor();
    setTooltipContentClasses(tooltipContentClasses: string): void;
    setAriaDescribedBy(ariaDescribedBy: string): void;
    private _initPositionEffect;
    private _initBrnTooltipDisabledEffect;
    private _initPositionAtOriginEffect;
    private _initTooltipContentClassesEffect;
    private _initAriaDescribedByPreviousEffect;
    private _initBrnTooltipTriggerEffect;
    private _initExitAnimationDurationEffect;
    private _initHideDelayEffect;
    ngAfterViewInit(): void;
    /**
     * Dispose the tooltip when destroyed.
     */
    ngOnDestroy(): void;
    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */
    show(delay?: number, origin?: {
        x: number;
        y: number;
    }): void;
    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */
    hide(delay?: number, exitAnimationDuration?: number): void;
    toggle(origin?: {
        x: number;
        y: number;
    }): void;
    _isTooltipVisible(): boolean;
    private _createOverlay;
    private _detach;
    private _updatePosition;
    /** Adds the configured offset to a position. Used as a hook for child classes. */
    protected _addOffset(position: ConnectedPosition): ConnectedPosition;
    /**
     * Returns the origin position and a fallback position based on the user's position preference.
     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
     */
    _getOrigin(): {
        main: OriginConnectionPosition;
        fallback: OriginConnectionPosition;
    };
    /** Returns the overlay position and a fallback position based on the user's preference */
    _getOverlayPosition(): {
        main: OverlayConnectionPosition;
        fallback: OverlayConnectionPosition;
    };
    /** Updates the tooltip message and repositions the overlay according to the new message length */
    private _updateTooltipContent;
    /** Inverts an overlay position. */
    private _invertPosition;
    /** Updates the class on the overlay panel based on the current position of the tooltip. */
    private _updateCurrentPositionClass;
    /** Binds the pointer events to the tooltip trigger. */
    private _setupPointerEnterEventsIfNeeded;
    private _setupPointerExitEventsIfNeeded;
    private _addListeners;
    private _platformSupportsMouseEvents;
    /** Listener for the `wheel` event on the element. */
    private _wheelListener;
    /** Disables the native browser gestures, based on how the tooltip has been configured. */
    private _disableNativeGesturesIfNecessary;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnTooltipTriggerDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnTooltipTriggerDirective, "[brnTooltipTrigger]", ["brnTooltipTrigger"], { "position": { "alias": "position"; "required": false; "isSignal": true; }; "positionAtOrigin": { "alias": "positionAtOrigin"; "required": false; "isSignal": true; }; "brnTooltipDisabled": { "alias": "brnTooltipDisabled"; "required": false; "isSignal": true; }; "showDelay": { "alias": "showDelay"; "required": false; "isSignal": true; }; "hideDelay": { "alias": "hideDelay"; "required": false; "isSignal": true; }; "exitAnimationDuration": { "alias": "exitAnimationDuration"; "required": false; "isSignal": true; }; "_tooltipContentClasses": { "alias": "tooltipContentClasses"; "required": false; "isSignal": true; }; "touchGestures": { "alias": "touchGestures"; "required": false; "isSignal": true; }; "_ariaDescribedBy": { "alias": "aria-describedby"; "required": false; "isSignal": true; }; "brnTooltipTrigger": { "alias": "brnTooltipTrigger"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
