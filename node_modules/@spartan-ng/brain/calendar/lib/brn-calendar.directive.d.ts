import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { BrnCalendarCellButtonDirective } from './brn-calendar-cell-button.directive';
import { BrnCalendarHeaderDirective } from './brn-calendar-header.directive';
import { BrnCalendar } from './brn-calendar.token';
import * as i0 from "@angular/core";
export declare class BrnCalendarDirective<T> implements BrnCalendar<T> {
    /** Access the date adapter */
    protected readonly dateAdapter: import("@spartan-ng/brain/date-time").BrnDateAdapter<T>;
    /** Access the change detector */
    private readonly _changeDetector;
    /** Access the injector */
    private readonly _injector;
    /** The minimum date that can be selected.*/
    readonly min: import("@angular/core").InputSignal<T | undefined>;
    /** The maximum date that can be selected. */
    readonly max: import("@angular/core").InputSignal<T | undefined>;
    /** Determine if the date picker is disabled. */
    readonly disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /** The selected value. */
    readonly date: import("@angular/core").ModelSignal<T | undefined>;
    /** Whether a specific date is disabled. */
    readonly dateDisabled: import("@angular/core").InputSignal<(date: T) => boolean>;
    /** The day the week starts on */
    readonly weekStartsOn: import("@angular/core").InputSignalWithTransform<Weekday, NumberInput>;
    /** The default focused date. */
    readonly defaultFocusedDate: import("@angular/core").InputSignal<T | undefined>;
    /** @internal Access the header */
    readonly header: import("@angular/core").Signal<BrnCalendarHeaderDirective | undefined>;
    /** Store the cells */
    protected readonly cells: import("@angular/core").Signal<readonly BrnCalendarCellButtonDirective<T>[]>;
    /**
     * @internal
     * The internal state of the component.
     */
    readonly state: import("@angular/core").Signal<{
        focusedDate: import("@angular/core").WritableSignal<T>;
    }>;
    /**
     * The focused date.
     */
    readonly focusedDate: import("@angular/core").Signal<T>;
    /**
     * Get all the days to display, this is the days of the current month
     * and the days of the previous and next month to fill the grid.
     */
    readonly days: import("@angular/core").Signal<T[]>;
    /** @internal Constrain a date to the min and max boundaries */
    constrainDate(date: T): T;
    /** @internal Determine if a date is disabled */
    isDateDisabled(date: T): boolean;
    isSelected(date: T): boolean;
    selectDate(date: T): void;
    /** @internal Set the focused date */
    setFocusedDate(date: T): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnCalendarDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnCalendarDirective<any>, "[brnCalendar]", never, { "min": { "alias": "min"; "required": false; "isSignal": true; }; "max": { "alias": "max"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; "date": { "alias": "date"; "required": false; "isSignal": true; }; "dateDisabled": { "alias": "dateDisabled"; "required": false; "isSignal": true; }; "weekStartsOn": { "alias": "weekStartsOn"; "required": false; "isSignal": true; }; "defaultFocusedDate": { "alias": "defaultFocusedDate"; "required": false; "isSignal": true; }; }, { "date": "dateChange"; }, ["header", "cells"], never, true, never>;
}
export type Weekday = 0 | 1 | 2 | 3 | 4 | 5 | 6;
