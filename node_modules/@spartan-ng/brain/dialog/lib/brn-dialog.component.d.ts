import { OverlayPositionBuilder, ScrollStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { type TemplateRef } from '@angular/core';
import { type BrnDialogOptions } from './brn-dialog-options';
import type { BrnDialogState } from './brn-dialog-state';
import * as i0 from "@angular/core";
export declare class BrnDialogComponent {
    private readonly _dialogService;
    private readonly _vcr;
    readonly positionBuilder: OverlayPositionBuilder;
    readonly ssos: ScrollStrategyOptions;
    private readonly _injector;
    protected readonly _defaultOptions: import("./brn-dialog-token").BrnDialogDefaultOptions;
    private _context;
    readonly stateComputed: import("@angular/core").Signal<BrnDialogState>;
    private _contentTemplate;
    private readonly _dialogRef;
    private _dialogStateEffectRef?;
    private readonly _backdropClass;
    private readonly _panelClass;
    readonly closed: import("@angular/core").OutputEmitterRef<any>;
    readonly stateChanged: import("@angular/core").OutputEmitterRef<BrnDialogState>;
    readonly state: import("@angular/core").InputSignal<BrnDialogState | null>;
    readonly role: import("@angular/core").InputSignal<"dialog" | "alertdialog">;
    readonly hasBackdrop: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly positionStrategy: import("@angular/core").InputSignal<import("@angular/cdk/overlay").PositionStrategy | null | undefined>;
    readonly mutablePositionStrategy: import("@angular/core").Signal<import("@angular/core").WritableSignal<import("@angular/cdk/overlay").PositionStrategy | null | undefined>>;
    private readonly _positionStrategyState;
    readonly scrollStrategy: import("@angular/core").InputSignal<ScrollStrategy | "close" | "reposition" | null | undefined>;
    protected _options: import("@angular/core").Signal<Partial<BrnDialogOptions>>;
    constructor();
    readonly restoreFocus: import("@angular/core").InputSignal<string | boolean | import("@angular/core").ElementRef<any>>;
    readonly closeOnOutsidePointerEvents: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly mutableCloseOnOutsidePointerEvents: import("@angular/core").Signal<import("@angular/core").WritableSignal<boolean>>;
    private readonly _closeOnOutsidePointerEventsState;
    readonly closeOnBackdropClick: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly attachTo: import("@angular/core").InputSignal<import("@angular/cdk/overlay").FlexibleConnectedPositionStrategyOrigin | null | undefined>;
    readonly mutableAttachTo: import("@angular/core").Signal<import("@angular/core").WritableSignal<import("@angular/cdk/overlay").FlexibleConnectedPositionStrategyOrigin | null | undefined>>;
    private readonly _attachToState;
    readonly attachPositions: import("@angular/core").InputSignal<import("@angular/cdk/overlay").ConnectedPosition[]>;
    readonly mutableAttachPositions: import("@angular/core").Signal<import("@angular/core").WritableSignal<import("@angular/cdk/overlay").ConnectedPosition[]>>;
    private readonly _attachPositionsState;
    readonly autoFocus: import("@angular/core").InputSignal<import("@angular/cdk/dialog").AutoFocusTarget | (Record<never, never> & string)>;
    readonly closeDelay: import("@angular/core").InputSignalWithTransform<number, unknown>;
    readonly disableClose: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    readonly ariaDescribedBy: import("@angular/core").InputSignal<string | null | undefined>;
    private readonly _mutableAriaDescribedBy;
    private readonly _ariaDescribedByState;
    readonly ariaLabelledBy: import("@angular/core").InputSignal<string | null | undefined>;
    private readonly _mutableAriaLabelledBy;
    private readonly _ariaLabelledByState;
    readonly ariaLabel: import("@angular/core").InputSignal<string | null | undefined>;
    private readonly _mutableAriaLabel;
    private readonly _ariaLabelState;
    readonly ariaModal: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    private readonly _mutableAriaModal;
    private readonly _ariaModalState;
    open<DialogContext>(): void;
    close(result?: any, delay?: number): void;
    registerTemplate(template: TemplateRef<unknown>): void;
    setOverlayClass(overlayClass: string | null | undefined): void;
    setPanelClass(panelClass: string | null | undefined): void;
    setContext(context: unknown): void;
    setAriaDescribedBy(ariaDescribedBy: string | null | undefined): void;
    setAriaLabelledBy(ariaLabelledBy: string | null | undefined): void;
    setAriaLabel(ariaLabel: string | null | undefined): void;
    setAriaModal(ariaModal: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnDialogComponent, "brn-dialog", ["brnDialog"], { "state": { "alias": "state"; "required": false; "isSignal": true; }; "role": { "alias": "role"; "required": false; "isSignal": true; }; "hasBackdrop": { "alias": "hasBackdrop"; "required": false; "isSignal": true; }; "positionStrategy": { "alias": "positionStrategy"; "required": false; "isSignal": true; }; "scrollStrategy": { "alias": "scrollStrategy"; "required": false; "isSignal": true; }; "restoreFocus": { "alias": "restoreFocus"; "required": false; "isSignal": true; }; "closeOnOutsidePointerEvents": { "alias": "closeOnOutsidePointerEvents"; "required": false; "isSignal": true; }; "closeOnBackdropClick": { "alias": "closeOnBackdropClick"; "required": false; "isSignal": true; }; "attachTo": { "alias": "attachTo"; "required": false; "isSignal": true; }; "attachPositions": { "alias": "attachPositions"; "required": false; "isSignal": true; }; "autoFocus": { "alias": "autoFocus"; "required": false; "isSignal": true; }; "closeDelay": { "alias": "closeDelay"; "required": false; "isSignal": true; }; "disableClose": { "alias": "disableClose"; "required": false; "isSignal": true; }; "ariaDescribedBy": { "alias": "aria-describedby"; "required": false; "isSignal": true; }; "ariaLabelledBy": { "alias": "aria-labelledby"; "required": false; "isSignal": true; }; "ariaLabel": { "alias": "aria-label"; "required": false; "isSignal": true; }; "ariaModal": { "alias": "aria-modal"; "required": false; "isSignal": true; }; }, { "closed": "closed"; "stateChanged": "stateChanged"; }, never, ["*"], true, never>;
}
