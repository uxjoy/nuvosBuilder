import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { AfterViewInit } from '@angular/core';
import * as i0 from "@angular/core";
export declare class BrnCommandDirective implements AfterViewInit {
    private static _id;
    private readonly _platform;
    private readonly _injector;
    /** The id of the command */
    readonly id: import("@angular/core").InputSignal<string>;
    /** The default filter function */
    private readonly _defaultFilter;
    /** A custom filter function to use when searching. */
    readonly filter: import("@angular/core").InputSignal<CommandFilter>;
    /** when the selection has changed */
    readonly valueChange: import("@angular/core").OutputEmitterRef<string>;
    /** @internal The search query */
    readonly search: import("@angular/core").Signal<string>;
    /** Access the search input if present */
    private readonly _searchInput;
    /** @internal Access all the items within the commmand */
    readonly items: import("@angular/core").Signal<readonly import("@spartan-ng/brain/command").BrnCommandItemDirective[]>;
    /** @internal The key manager for managing active descendant */
    readonly keyManager: ActiveDescendantKeyManager<import("@spartan-ng/brain/command").BrnCommandItemDirective>;
    constructor();
    ngAfterViewInit(): void;
    protected selectActiveItem(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnCommandDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnCommandDirective, "[brnCommand]", never, { "id": { "alias": "id"; "required": false; "isSignal": true; }; "filter": { "alias": "filter"; "required": false; "isSignal": true; }; }, { "valueChange": "valueChange"; }, ["_searchInput", "items"], never, true, never>;
}
export type CommandFilter = (value: string, search: string) => boolean;
