import { ElementRef, Renderer2 } from '@angular/core';
import { DefaultValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class BrnCommandSearchInputDirective extends DefaultValueAccessor {
    private readonly elementRef;
    private readonly _command;
    /** The initial value of the search input */
    readonly value: import("@angular/core").InputSignal<string>;
    /** @internal The mutable value of the search input */
    readonly mutableValue: import("@angular/core").Signal<import("@angular/core").WritableSignal<string>>;
    /** @internal The "real" value of the search input */
    readonly valueState: import("@angular/core").Signal<string>;
    /** The id of the active option */
    protected readonly _activeDescendant: import("@angular/core").WritableSignal<string | undefined>;
    constructor(renderer: Renderer2, elementRef: ElementRef, compositionMode: boolean);
    /** Listen for changes to the input value */
    protected onInput(): void;
    /** Listen for keydown events */
    protected onKeyDown(event: KeyboardEvent): void;
    /** CONROL VALUE ACCESSOR */
    writeValue(value: string | null): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnCommandSearchInputDirective, [null, null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnCommandSearchInputDirective, "input[brnCommandSearchInput]", never, { "value": { "alias": "value"; "required": false; "isSignal": true; }; }, {}, never, never, true, never>;
}
