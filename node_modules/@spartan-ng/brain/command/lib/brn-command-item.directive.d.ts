import { Highlightable } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { OnInit } from '@angular/core';
import * as i0 from "@angular/core";
export declare class BrnCommandItemDirective implements Highlightable, OnInit {
    private static _id;
    private readonly _platform;
    private readonly _elementRef;
    /** Access the command component */
    private readonly _command;
    /** A unique id for the item */
    readonly id: import("@angular/core").InputSignal<string>;
    /** The value this item represents. */
    readonly value: import("@angular/core").InputSignal<string>;
    /** Whether the item is disabled. */
    readonly _disabled: import("@angular/core").InputSignalWithTransform<boolean, BooleanInput>;
    /** Expose disabled as a value - used by the Highlightable interface */
    get disabled(): boolean;
    /** Whether the item is initialized, this is to prevent accessing the value-input before the component is initialized.
     * The brn-command-empty directive accesses the value before the component is initialized, which causes an error.
     */
    private readonly _initialized;
    /** Whether the item is selected. */
    protected readonly active: import("@angular/core").WritableSignal<boolean>;
    /** Emits when the item is selected. */
    readonly selected: import("@angular/core").OutputEmitterRef<void>;
    /** @internal Determine if this item is visible based on the current search query */
    readonly visible: import("@angular/core").Signal<boolean>;
    /** @internal Get the value of the item, with check if it has been initialized to avoid errors */
    safeValue: import("@angular/core").Signal<string>;
    /** @internal Get the display value */
    getLabel(): string;
    /** @internal */
    setActiveStyles(): void;
    /** @internal */
    setInactiveStyles(): void;
    protected onClick(): void;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnCommandItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnCommandItemDirective, "button[brnCommandItem]", never, { "id": { "alias": "id"; "required": false; "isSignal": true; }; "value": { "alias": "value"; "required": true; "isSignal": true; }; "_disabled": { "alias": "disabled"; "required": false; "isSignal": true; }; }, { "selected": "selected"; }, never, never, true, never>;
}
