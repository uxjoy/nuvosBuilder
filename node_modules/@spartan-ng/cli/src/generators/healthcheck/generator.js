"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.healthcheckGenerator = healthcheckGenerator;
const devkit_1 = require("@nx/devkit");
const healthchecks_1 = require("./healthchecks");
const brain_imports_1 = require("./healthchecks/brain-imports");
const brn_radio_1 = require("./healthchecks/brn-radio");
const brn_toggle_group_1 = require("./healthchecks/brn-toggle-group");
const core_imports_1 = require("./healthchecks/core-imports");
const hlm_icon_1 = require("./healthchecks/hlm-icon");
const hlm_scroll_area_1 = require("./healthchecks/hlm-scroll-area");
const hlm_select_1 = require("./healthchecks/hlm-select");
const version_1 = require("./healthchecks/version");
const prompt_1 = require("./utils/prompt");
const reporter_1 = require("./utils/reporter");
const runner_1 = require("./utils/runner");
async function healthcheckGenerator(tree, options) {
    devkit_1.logger.info('Running healthchecks...');
    const healthchecks = [
        version_1.versionHealthcheck,
        brain_imports_1.brainImportsHealthcheck,
        core_imports_1.coreImportsHealthcheck,
        hlm_icon_1.helmIconHealthcheck,
        hlm_scroll_area_1.scrollAreaHealthcheck,
        brn_radio_1.brainRadioHealthcheck,
        hlm_select_1.selectHealthcheck,
        brn_toggle_group_1.brainToggleHealthcheck,
    ];
    const failedReports = [];
    for (const healthcheck of healthchecks) {
        const report = await (0, runner_1.runHealthcheck)(tree, healthcheck);
        (0, reporter_1.printReport)(report);
        if (report.status === healthchecks_1.HealthcheckStatus.Failure) {
            failedReports.push(report);
        }
    }
    for (const report of failedReports) {
        if (report.fixable && (0, healthchecks_1.isHealthcheckFixable)(report.healthcheck)) {
            const fix = options.autoFix || (await (0, prompt_1.promptUser)(report.healthcheck.prompt));
            if (fix) {
                await report.healthcheck.fix(tree, { angularCli: options.angularCli });
            }
        }
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
}
exports.default = healthcheckGenerator;
//# sourceMappingURL=generator.js.map