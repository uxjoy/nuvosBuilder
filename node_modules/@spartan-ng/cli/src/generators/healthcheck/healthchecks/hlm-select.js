"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.selectHealthcheck = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const hlm_class_1 = require("../../../utils/hlm-class");
const generator_1 = tslib_1.__importDefault(require("../../migrate-select/generator"));
const healthchecks_1 = require("../healthchecks");
exports.selectHealthcheck = {
    name: 'Helm Select',
    async detect(tree, failure) {
        (0, devkit_1.visitNotIgnoredFiles)(tree, '/', (file) => {
            // if the file is a .ts or .htlm file, check for helm icons
            if (!file.endsWith('.ts') && !file.endsWith('.html')) {
                return;
            }
            const contents = tree.read(file, 'utf-8');
            if (!contents) {
                return;
            }
            // check if the legacy openedChange event is being used
            if (/<(brn-select|hlm-select)[^>]*\(\s*openedChange\s*\)=/g.test(contents)) {
                failure('Select is using the renamed openedChange event.', healthchecks_1.HealthcheckSeverity.Error, true);
            }
            // check if the legacy focus classes are being used
            if ((0, hlm_class_1.hasHelmClasses)(tree, file, {
                component: 'HlmSelectOptionComponent',
                classes: ['focus:bg-accent', 'focus:text-accent-foreground'],
            })) {
                failure('Select option is using the legacy focus classes.', healthchecks_1.HealthcheckSeverity.Error, true);
            }
        });
    },
    fix: async (tree) => {
        await (0, generator_1.default)(tree, { skipFormat: true });
        return true;
    },
    prompt: 'Would you like to migrate selects?',
};
//# sourceMappingURL=hlm-select.js.map