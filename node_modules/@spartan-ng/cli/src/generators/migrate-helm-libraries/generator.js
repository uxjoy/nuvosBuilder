"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateHelmLibrariesGenerator = migrateHelmLibrariesGenerator;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const workspace_1 = require("@nx/workspace");
const enquirer_1 = require("enquirer");
const path_1 = require("path");
const config_1 = require("../../utils/config");
const tsconfig_1 = require("../../utils/tsconfig");
const generator_1 = require("../ui/generator");
async function migrateHelmLibrariesGenerator(tree, options) {
    // Detect the libraries that are already installed
    const existingLibraries = await detectLibraries(tree);
    if (existingLibraries.length === 0) {
        devkit_1.logger.info('No libraries to migrate');
        return;
    }
    // if we are running in Jest we can't use the enquirer prompt
    if (process.env.JEST_WORKER_ID) {
        return;
    }
    // allow the user to select which libraries to migrate
    const selectedLibraries = await (0, enquirer_1.prompt)({
        type: 'multiselect',
        name: 'libraries',
        message: 'The following libraries are installed. Select the ones you want to replace with the latest version:',
        choices: ['all', ...existingLibraries],
    });
    // prompt the user to confirm their actions as this will overwrite the existing libraries and remove any customizations
    const confirmation = (await (0, enquirer_1.prompt)({
        type: 'confirm',
        name: 'confirm',
        message: 'Are you sure you want to update the selected libraries? This will overwrite the existing libraries and remove any customizations.',
    }));
    if (!confirmation.confirm) {
        devkit_1.logger.info('Aborting migration.');
        return;
    }
    let { libraries } = selectedLibraries;
    if (libraries.length === 0) {
        devkit_1.logger.info('No libraries will be updated.');
        return;
    }
    // if the user selected all libraries then we will update all libraries
    if (libraries.includes('all')) {
        libraries = existingLibraries;
    }
    await removeExistingLibraries(tree, options, libraries);
    await regenerateLibraries(tree, options, libraries);
    await (0, devkit_1.formatFiles)(tree);
}
exports.default = migrateHelmLibrariesGenerator;
async function detectLibraries(tree) {
    const supportedLibraries = (await Promise.resolve().then(() => __importStar(require('../ui/supported-ui-libraries.json'))).then((m) => m.default));
    const tsconfigPaths = (0, tsconfig_1.readTsConfigPathsFromTree)(tree);
    // store the list of libraries in the tsconfig
    const existingLibraries = [];
    for (const libraryName in supportedLibraries) {
        const library = supportedLibraries[libraryName];
        if (tsconfigPaths[`@spartan-ng/${library.internalName}`]) {
            existingLibraries.push(libraryName);
        }
    }
    return existingLibraries;
}
async function removeExistingLibraries(tree, options, libraries) {
    const tsconfigPaths = (0, tsconfig_1.readTsConfigPathsFromTree)(tree);
    for (const library of libraries) {
        // get the tsconfig path for the library
        const tsconfigPath = tsconfigPaths[`@spartan-ng/ui-${library}-helm`];
        if (!tsconfigPath) {
            throw new Error(`Could not find tsconfig path for library ${library}`);
        }
        // if there is more than one path then we assume we should use the first one
        const path = tsconfigPath[0];
        // if we are in the Nx CLI we can use the nx generator to remove a library
        if (!options.angularCli) {
            await (0, workspace_1.removeGenerator)(tree, {
                projectName: `ui-${library}-helm`,
                forceRemove: true,
                skipFormat: true,
                importPath: `@spartan-ng/ui-${library}-helm`,
            });
        }
        else {
            // get the directory of the path e.g. ./libs/ui/ui-aspectratio-helm/src/index.ts
            // we want to remove the directory ./libs/ui/ui-aspectratio-helm so we need to remove the last part of the path
            // and the src directory
            const directory = (0, path_1.dirname)(path).replace(/\/src$/, '');
            // recursively remove all files in the directory
            deleteFiles(tree, directory);
            // remove the path from the tsconfig
            (0, devkit_1.updateJson)(tree, (0, js_1.getRootTsConfigPathInTree)(tree), (json) => {
                delete json.compilerOptions.paths[`@spartan-ng/ui-${library}-helm`];
                return json;
            });
        }
    }
}
async function regenerateLibraries(tree, options, libraries) {
    const supportedLibraries = (await Promise.resolve().then(() => __importStar(require('../ui/supported-ui-libraries.json'))).then((m) => m.default));
    const config = await (0, config_1.getOrCreateConfig)(tree);
    await (0, generator_1.createPrimitiveLibraries)({
        primitives: libraries,
    }, Object.keys(supportedLibraries), supportedLibraries, tree, { ...options, installPeerDependencies: true }, config);
}
function deleteFiles(tree, path) {
    if (tree.isFile(path)) {
        tree.delete(path);
        return;
    }
    const files = tree.children(path);
    for (const file of files) {
        deleteFiles(tree, (0, path_1.join)(path, file));
    }
}
//# sourceMappingURL=generator.js.map