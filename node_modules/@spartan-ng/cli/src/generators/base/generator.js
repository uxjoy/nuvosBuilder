"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hlmBaseGenerator = hlmBaseGenerator;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const path = tslib_1.__importStar(require("node:path"));
const tsconfig_1 = require("../../utils/tsconfig");
const version_utils_1 = require("../../utils/version-utils");
const build_dependency_array_1 = require("./lib/build-dependency-array");
const get_target_library_directory_1 = require("./lib/get-target-library-directory");
const initialize_angular_library_1 = require("./lib/initialize-angular-library");
const versions_1 = require("./versions");
async function hlmBaseGenerator(tree, options) {
    const tasks = [];
    const targetLibDir = (0, get_target_library_directory_1.getTargetLibraryDirectory)(options, tree);
    const existingPathsByAlias = (0, tsconfig_1.readTsConfigPathsFromTree)(tree);
    const tsConfigAliasToUse = `@spartan-ng/${options.publicName}`;
    if (Object.keys(existingPathsByAlias).includes(tsConfigAliasToUse)) {
        console.log(`Skipping ${tsConfigAliasToUse}. It's already installed!`);
        return (0, devkit_1.runTasksInSerial)(...tasks);
    }
    if (options.angularCli) {
        (0, js_1.addTsConfigPath)(tree, tsConfigAliasToUse, [`.${path.sep}${(0, devkit_1.joinPathFragments)(targetLibDir, 'src', 'index.ts')}`]);
    }
    else {
        tasks.push(await (0, initialize_angular_library_1.initializeAngularLibrary)(tree, options));
    }
    (0, devkit_1.generateFiles)(tree, path.join(__dirname, '..', 'ui', 'libs', options.internalName, 'files'), path.join(targetLibDir, 'src'), options);
    const angularVersion = (0, version_utils_1.getInstalledPackageVersion)(tree, '@angular/core', versions_1.FALLBACK_ANGULAR_VERSION, true);
    const existingCdkVersion = (0, version_utils_1.getInstalledPackageVersion)(tree, '@angular/cdk', versions_1.FALLBACK_ANGULAR_VERSION, true);
    const dependencies = (0, build_dependency_array_1.buildDependencyArray)(options, angularVersion, existingCdkVersion);
    const devDependencies = (0, build_dependency_array_1.buildDevDependencyArray)();
    tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, dependencies, devDependencies));
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.default = hlmBaseGenerator;
//# sourceMappingURL=generator.js.map