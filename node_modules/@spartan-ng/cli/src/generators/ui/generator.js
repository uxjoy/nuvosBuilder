"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = hlmUIGenerator;
exports.createPrimitiveLibraries = createPrimitiveLibraries;
const devkit_1 = require("@nx/devkit");
const enquirer_1 = require("enquirer");
const config_1 = require("../../utils/config");
const add_dependent_primitive_1 = require("./add-dependent-primitive");
async function hlmUIGenerator(tree, options) {
    const tasks = [];
    const config = await (0, config_1.getOrCreateConfig)(tree, {
        componentsPath: options.directory,
    });
    const availablePrimitives = await Promise.resolve().then(() => __importStar(require('./supported-ui-libraries.json'))).then((m) => m.default);
    const availablePrimitiveNames = [...Object.keys(availablePrimitives), 'collapsible', 'menubar', 'contextmenu'];
    let response = { primitives: [] };
    if (options.name && availablePrimitiveNames.includes(options.name)) {
        response.primitives.push(options.name);
    }
    else {
        response = await (0, enquirer_1.prompt)({
            type: 'multiselect',
            required: true,
            name: 'primitives',
            message: 'Choose which primitives you want to copy',
            choices: ['all', ...availablePrimitiveNames.sort()],
        });
    }
    tasks.push(...(await createPrimitiveLibraries(response, availablePrimitiveNames, availablePrimitives, tree, options, config)));
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
async function createPrimitiveLibraries(response, availablePrimitiveNames, availablePrimitives, tree, options, config) {
    const allPrimitivesSelected = response.primitives.includes('all');
    const primitivesToCreate = allPrimitivesSelected ? availablePrimitiveNames : response.primitives;
    const tasks = [];
    if (!response.primitives.includes('all') || options.installPeerDependencies) {
        await (0, add_dependent_primitive_1.addDependentPrimitives)(primitivesToCreate, false);
    }
    await replaceContextAndMenuBar(primitivesToCreate, allPrimitivesSelected);
    if (primitivesToCreate.length === 1 && primitivesToCreate[0] === 'collapsible') {
        return tasks;
    }
    // Use Promise.all() to handle parallel execution of primitive library creation tasks
    const installTasks = await Promise.all(primitivesToCreate.map(async (primitiveName) => {
        if (primitiveName === 'collapsible')
            return;
        const internalName = availablePrimitives[primitiveName].internalName;
        const peerDependencies = removeHelmKeys(availablePrimitives[primitiveName].peerDependencies);
        const { generator } = await Promise.resolve(`${
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        `./libs/${internalName}/generator`}`).then(s => __importStar(require(s)));
        return generator(tree, {
            internalName: '',
            publicName: '',
            primitiveName: '',
            peerDependencies,
            directory: options.directory ?? config.componentsPath,
            tags: options.tags,
            rootProject: options.rootProject,
            angularCli: options.angularCli,
        });
    }));
    tasks.push(...installTasks.filter(Boolean));
    return tasks;
}
const replaceContextAndMenuBar = async (primtivesToCreate, silent = false) => {
    const contextIndex = primtivesToCreate.indexOf('contextmenu');
    if (contextIndex >= 0) {
        if (!silent) {
            await (0, enquirer_1.prompt)({
                type: 'confirm',
                name: 'contextMenu',
                message: 'The context menu is implemented as part of the menu-helm primitive. Adding menu primitive.',
            });
        }
        primtivesToCreate.splice(contextIndex, 1);
    }
    const menubarIndex = primtivesToCreate.indexOf('menubar');
    if (menubarIndex >= 0) {
        if (!silent) {
            await (0, enquirer_1.prompt)({
                type: 'confirm',
                name: 'menubar',
                message: 'The menubar is implemented as part of the menu-helm primitive. Adding menu primitive.',
            });
        }
        primtivesToCreate.splice(menubarIndex, 1);
    }
};
const removeHelmKeys = (obj) => Object.fromEntries(Object.entries(obj).filter(([key]) => !key.toLowerCase().includes('helm')));
//# sourceMappingURL=generator.js.map