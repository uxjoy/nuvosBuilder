"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateScrollAreaGenerator = migrateScrollAreaGenerator;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const string_change_1 = require("@nx/devkit/src/utils/string-change");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const typescript_1 = tslib_1.__importDefault(require("typescript"));
async function migrateScrollAreaGenerator(tree, { skipFormat }) {
    replaceImports(tree);
    replaceSelector(tree);
    if (!skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
}
function replaceSelector(tree) {
    // if the element is `<hlm-scroll-area` then we need to replace it with `<ng-scrollbar hlm`
    // we also need to replace the closing tag `</hlm-scroll-area>` with `</ng-scrollbar>`
    (0, devkit_1.visitNotIgnoredFiles)(tree, '.', (path) => {
        // if this is not an html file or typescript file (inline templates) then skip
        if (!path.endsWith('.html') && !path.endsWith('.ts')) {
            return;
        }
        let content = tree.read(path, 'utf-8');
        if (!content) {
            return;
        }
        content = content.replace(/<hlm-scroll-area/g, '<ng-scrollbar hlm');
        content = content.replace(/<\/hlm-scroll-area>/g, '</ng-scrollbar>');
        tree.write(path, content);
    });
}
function replaceImports(tree) {
    // ng modules or standalone components will have import arrays that may need updated.
    // if the import is `HlmScrollAreaModule` then we need to also import `NgScrollbarModule`,
    // if the import is `HlmScrollAreaComponent` we need to rename it to `HlmScrollAreaDirective` and add the `NgScrollbarModule` import.
    (0, devkit_1.visitNotIgnoredFiles)(tree, '.', (path) => {
        // if the file is not a typescript file then skip
        if (!path.endsWith('.ts')) {
            return;
        }
        let content = tree.read(path, 'utf-8');
        if (!content) {
            return;
        }
        // convert the content to an ast
        const sourceFile = typescript_1.default.createSourceFile(path, content, typescript_1.default.ScriptTarget.Latest, true);
        // find all imports of HlmScrollAreaModule or HlmScrollAreaComponent
        const imports = findHlmScrollAreaImports(sourceFile);
        // if no imports are found then skip
        if (imports.length === 0) {
            return;
        }
        const changes = [];
        for (const identifier of imports) {
            // if the identifier is HlmScrollAreaModule then we need to add NgScrollbarModule to the imports
            if (identifier.getText() === 'HlmScrollAreaModule') {
                changes.push({
                    type: string_change_1.ChangeType.Insert,
                    index: identifier.getStart(),
                    text: 'NgScrollbarModule, ',
                });
            }
            // if the identifier is HlmScrollAreaComponent then we need to rename it to HlmScrollAreaDirective and add NgScrollbarModule to the imports
            if (identifier.getText() === 'HlmScrollAreaComponent') {
                changes.push({
                    type: string_change_1.ChangeType.Insert,
                    index: identifier.getStart(),
                    text: 'NgScrollbarModule, ',
                });
            }
            // check if the NgScrollbarModule import is already present
            if (!hasImport(content, 'NgScrollbarModule', 'ngx-scrollbar')) {
                changes.push({
                    type: string_change_1.ChangeType.Insert,
                    index: 0,
                    text: `import { NgScrollbarModule } from 'ngx-scrollbar';\n`,
                });
            }
        }
        content = (0, string_change_1.applyChangesToString)(content, changes);
        // if there are any remaining uses of HlmScrollAreaComponent then replace them with HlmScrollAreaDirective
        content = content.replace(/HlmScrollAreaComponent/g, 'HlmScrollAreaDirective');
        tree.write(path, content);
    });
}
function findHlmScrollAreaImports(node) {
    const matches = [];
    const visit = (node) => {
        if (typescript_1.default.isPropertyAssignment(node) &&
            node.name.getText() === 'imports' &&
            typescript_1.default.isArrayLiteralExpression(node.initializer)) {
            // check if the array literal contains the HlmScrollAreaModule or HlmScrollAreaComponent
            node.initializer.elements.forEach((element) => {
                if (typescript_1.default.isIdentifier(element)) {
                    if (element.getText() === 'HlmScrollAreaModule' || element.getText() === 'HlmScrollAreaComponent') {
                        matches.push(element);
                    }
                }
            });
        }
        typescript_1.default.forEachChild(node, visit);
    };
    visit(node);
    return matches;
}
function hasImport(contents, importName, importPath) {
    const sourceFile = typescript_1.default.createSourceFile('temp.ts', contents, typescript_1.default.ScriptTarget.Latest, true);
    return (0, ast_utils_1.isImported)(sourceFile, importName, importPath);
}
exports.default = migrateScrollAreaGenerator;
//# sourceMappingURL=generator.js.map