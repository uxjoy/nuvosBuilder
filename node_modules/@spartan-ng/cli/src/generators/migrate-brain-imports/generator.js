"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateBrainImportsGenerator = migrateBrainImportsGenerator;
exports.replaceBrainPackageWithSecondaryEntrypoint = replaceBrainPackageWithSecondaryEntrypoint;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const devkit_exports_1 = require("nx/src/devkit-exports");
const path_1 = require("path");
const import_map_1 = tslib_1.__importDefault(require("./import-map"));
const binary_extensions_1 = require("./utils/binary-extensions");
async function migrateBrainImportsGenerator(tree, options) {
    if (!options.skipInstall) {
        ensureBrainPackageIsInstalled(tree);
    }
    for (const [from, to] of Object.entries(import_map_1.default)) {
        replaceBrainPackageWithSecondaryEntrypoint(tree, options, from, to);
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
}
function ensureBrainPackageIsInstalled(tree) {
    // read the root package.json
    const packageJson = (0, devkit_exports_1.readJson)(tree, 'package.json');
    // merge all dependencies so we easily search for the cli package
    const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
    // check if the brain package is installed
    if (deps['@spartan-ng/brain']) {
        return;
    }
    // the brain package version should be the same as the cli package
    (0, devkit_exports_1.updateJson)(tree, 'package.json', (packageJson) => {
        packageJson.dependencies['@spartan-ng/brain'] = deps['@spartan-ng/cli'];
        return packageJson;
    });
    const { install } = (0, devkit_exports_1.getPackageManagerCommand)();
    devkit_exports_1.logger.warn(`The @spartan-ng/brain package has been added to your dependencies. Please run '${install}' to install the package.`);
}
function replaceBrainPackageWithSecondaryEntrypoint(tree, options, oldImport, newImport) {
    if (!options.skipInstall) {
        removePackageInDependencies(tree, oldImport);
    }
    replaceUsages(tree, oldImport, newImport);
}
function removePackageInDependencies(tree, oldPackageName) {
    (0, devkit_1.visitNotIgnoredFiles)(tree, '.', (path) => {
        if ((0, path_1.basename)(path) !== 'package.json') {
            return;
        }
        try {
            (0, devkit_exports_1.updateJson)(tree, path, (packageJson) => {
                for (const deps of [
                    packageJson.dependencies ?? {},
                    packageJson.devDependencies ?? {},
                    packageJson.peerDependencies ?? {},
                    packageJson.optionalDependencies ?? {},
                ]) {
                    if (oldPackageName in deps) {
                        delete deps[oldPackageName];
                    }
                }
                return packageJson;
            });
        }
        catch (e) {
            console.warn(`Could not remove ${oldPackageName} in ${path}.`);
        }
    });
}
// based on https://github.com/nrwl/nx/blob/master/packages/devkit/src/utils/replace-package.ts
function replaceUsages(tree, oldPackageName, newPackageName) {
    (0, devkit_1.visitNotIgnoredFiles)(tree, '.', (path) => {
        if ((0, binary_extensions_1.isBinaryPath)(path)) {
            return;
        }
        const ignoredFiles = [
            'yarn.lock',
            'package-lock.json',
            'pnpm-lock.yaml',
            'bun.lockb',
            'CHANGELOG.md',
            // this is relevant for this repo only - and this file is auto-generated
            'supported-ui-libraries.json',
            // we don't want to replace usages in the import map as these are used to detect the usages
            'import-map.ts',
        ];
        if (ignoredFiles.includes((0, path_1.basename)(path))) {
            return;
        }
        try {
            const contents = tree.read(path).toString();
            if (!contents.includes(oldPackageName)) {
                return;
            }
            tree.write(path, contents.replace(new RegExp(oldPackageName, 'g'), newPackageName));
        }
        catch {
            devkit_exports_1.logger.warn(`Could not replace ${oldPackageName} with ${newPackageName} in ${path}.`);
        }
    });
}
exports.default = migrateBrainImportsGenerator;
//# sourceMappingURL=generator.js.map