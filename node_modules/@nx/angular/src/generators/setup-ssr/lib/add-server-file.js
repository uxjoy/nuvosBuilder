"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addServerFile = addServerFile;
const devkit_1 = require("@nx/devkit");
const path_1 = require("path");
const version_utils_1 = require("../../utils/version-utils");
const constants_1 = require("./constants");
function addServerFile(tree, options) {
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    const { outputPath } = project.targets.build.options;
    const browserDistDirectory = options.isUsingApplicationBuilder
        ? getApplicationBuilderBrowserOutputPath(outputPath)
        : outputPath;
    const { major: angularMajorVersion } = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    const baseFilesPath = (0, path_1.join)(__dirname, '..', 'files');
    let pathToFiles;
    if (angularMajorVersion >= 19) {
        pathToFiles = (0, path_1.join)(baseFilesPath, 'v19+', options.isUsingApplicationBuilder
            ? 'application-builder' +
                (options.serverRouting ? '' : '-common-engine')
            : 'server-builder', 'server');
    }
    else {
        pathToFiles = (0, path_1.join)(baseFilesPath, 'pre-v19', 'server', options.isUsingApplicationBuilder
            ? 'application-builder'
            : 'server-builder');
    }
    const sourceRoot = project.sourceRoot ?? (0, devkit_1.joinPathFragments)(project.root, 'src');
    (0, devkit_1.generateFiles)(tree, pathToFiles, angularMajorVersion >= 19 ? sourceRoot : project.root, {
        ...options,
        browserDistDirectory,
        tpl: '',
    });
}
function getApplicationBuilderBrowserOutputPath(outputPath) {
    if (outputPath) {
        if (typeof outputPath === 'string') {
            // when `outputPath` is a string, it's the base path, so we return the default browser path
            return constants_1.DEFAULT_BROWSER_DIR;
        }
        return outputPath.browser ?? constants_1.DEFAULT_BROWSER_DIR;
    }
    return constants_1.DEFAULT_BROWSER_DIR;
}
