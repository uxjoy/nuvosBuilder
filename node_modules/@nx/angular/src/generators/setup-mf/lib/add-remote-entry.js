"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addRemoteEntry = addRemoteEntry;
const devkit_1 = require("@nx/devkit");
const route_utils_1 = require("../../../utils/nx-devkit/route-utils");
const version_utils_1 = require("../../utils/version-utils");
function addRemoteEntry(tree, { appName, routing, prefix, standalone }, appRoot) {
    const { major: angularMajorVersion } = (0, version_utils_1.getInstalledAngularVersionInfo)(tree);
    (0, devkit_1.generateFiles)(tree, standalone
        ? (0, devkit_1.joinPathFragments)(__dirname, '../files/standalone-entry-component-files')
        : (0, devkit_1.joinPathFragments)(__dirname, '../files/entry-module-files'), `${appRoot}/src/app/remote-entry`, {
        tmpl: '',
        appName,
        routing,
        prefix,
        // Angular v19 or higher defaults to true, while v18 or lower defaults to false
        setStandaloneFalse: angularMajorVersion >= 19,
        setStandaloneTrue: angularMajorVersion < 19,
    });
    if (standalone && routing) {
        (0, route_utils_1.addRoute)(tree, (0, devkit_1.joinPathFragments)(appRoot, 'src/app/app.routes.ts'), `{path: '', loadChildren: () => import('./remote-entry/entry.routes').then(m => m.remoteRoutes)}`);
    }
    else if (routing) {
        (0, route_utils_1.addRoute)(tree, (0, devkit_1.joinPathFragments)(appRoot, 'src/app/app.routes.ts'), `{ path: '', loadChildren: () => import('./remote-entry/entry.module').then(m => m.RemoteEntryModule) }`);
    }
}
