{
  "version": 3,
  "sources": ["../../../../../../node_modules/@ng-icons/core/fesm2022/ng-icons-core.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, makeEnvironmentProviders, input, numberAttribute, booleanAttribute, computed, Component, ChangeDetectionStrategy, Injector, Renderer2, PLATFORM_ID, ElementRef, effect, runInInjectionContext, NgModule, Inject } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { isObservable } from 'rxjs';\nconst _c0 = [\"*\"];\nconst NgGlyphConfigToken = new InjectionToken('Ng Glyph Config');\nconst defaultConfig = {\n  size: '1em',\n  opticalSize: 20,\n  weight: 400,\n  grade: 0,\n  fill: false\n};\n/**\n * Provide the configuration for the glyph\n * @param config The configuration to use\n */\nfunction provideNgGlyphsConfig(config) {\n  return {\n    provide: NgGlyphConfigToken,\n    useValue: {\n      ...defaultConfig,\n      ...config\n    }\n  };\n}\n/**\n * Inject the configuration for the glyphs\n * @returns The configuration to use\n * @internal\n */\nfunction injectNgGlyphsConfig() {\n  return inject(NgGlyphConfigToken, {\n    optional: true\n  }) ?? defaultConfig;\n}\nconst NgGlyphsToken = new InjectionToken('NgGlyphsToken');\nfunction provideNgGlyphs(...glyphsets) {\n  // if there are no glyphsets, throw an error\n  if (!glyphsets.length) {\n    throw new Error('Please provide at least one glyphset.');\n  }\n  // the default glyphset is the first one\n  const defaultGlyphset = glyphsets[0].name;\n  return makeEnvironmentProviders([{\n    provide: NgGlyphsToken,\n    useValue: {\n      defaultGlyphset,\n      glyphsets\n    }\n  }]);\n}\nfunction injectNgGlyphs() {\n  const glyphs = inject(NgGlyphsToken, {\n    optional: true\n  });\n  if (!glyphs) {\n    throw new Error('Please provide the glyphs using the provideNgGlyphs() function.');\n  }\n  return glyphs;\n}\nfunction coerceCssPixelValue(value) {\n  return value == null ? '' : /^\\d+$/.test(value) ? `${value}px` : value;\n}\nclass NgGlyph {\n  constructor() {\n    /**\n     * Access the available glyphsets\n     */\n    this.glyphsets = injectNgGlyphs();\n    /**\n     * Access the default configuration\n     */\n    this.config = injectNgGlyphsConfig();\n    /**\n     * Define the name of the glyph to display\n     */\n    this.name = input.required();\n    /**\n     * Define the glyphset to use\n     */\n    this.glyphset = input(this.glyphsets.defaultGlyphset);\n    /**\n     * Define the optical size of the glyph\n     */\n    this.opticalSize = input(this.config.opticalSize, {\n      transform: numberAttribute\n    });\n    /**\n     * Define the weight of the glyph\n     */\n    this.weight = input(this.config.weight, {\n      transform: numberAttribute\n    });\n    /**\n     * Define the grade of the glyph\n     */\n    this.grade = input(this.config.grade, {\n      transform: numberAttribute\n    });\n    /**\n     * Define the fill of the glyph\n     */\n    this.fill = input(this.config.fill, {\n      transform: booleanAttribute\n    });\n    /**\n     * Define the size of the glyph\n     */\n    this.size = input(this.config.size, {\n      transform: coerceCssPixelValue\n    });\n    /**\n     * Define the color of the glyph\n     */\n    this.color = input(this.config.color);\n    /**\n     * Derive the glyphset class from the glyphset name\n     */\n    this.glyphsetClass = computed(() => {\n      const glyphset = this.glyphsets.glyphsets.find(glyphset => glyphset.name === this.glyphset());\n      if (!glyphset) {\n        throw new Error(`The glyphset \"${this.glyphset()}\" does not exist. Please provide a valid glyphset.`);\n      }\n      return glyphset.baseClass;\n    });\n    /**\n     * Define the font variation settings of the glyph\n     */\n    this.fontVariationSettings = computed(() => {\n      return `'FILL' ${this.fill() ? 1 : 0}, 'wght' ${this.weight()}, 'GRAD' ${this.grade()}, 'opsz' ${this.opticalSize()}`;\n    });\n  }\n  static {\n    this.ɵfac = function NgGlyph_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgGlyph)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgGlyph,\n      selectors: [[\"ng-glyph\"]],\n      hostVars: 9,\n      hostBindings: function NgGlyph_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"textContent\", ctx.name());\n          i0.ɵɵclassMap(ctx.glyphsetClass());\n          i0.ɵɵstyleProp(\"--ng-glyph__size\", ctx.size())(\"color\", ctx.color())(\"font-variation-settings\", ctx.fontVariationSettings());\n        }\n      },\n      inputs: {\n        name: [1, \"name\"],\n        glyphset: [1, \"glyphset\"],\n        opticalSize: [1, \"opticalSize\"],\n        weight: [1, \"weight\"],\n        grade: [1, \"grade\"],\n        fill: [1, \"fill\"],\n        size: [1, \"size\"],\n        color: [1, \"color\"]\n      },\n      decls: 0,\n      vars: 0,\n      template: function NgGlyph_Template(rf, ctx) {},\n      styles: [\"[_nghost-%COMP%]{display:inline-block;width:var(--ng-glyph__size);height:var(--ng-glyph__size);font-size:var(--ng-glyph__size);overflow:hidden}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgGlyph, [{\n    type: Component,\n    args: [{\n      selector: 'ng-glyph',\n      standalone: true,\n      template: ``,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '[class]': 'glyphsetClass()',\n        '[textContent]': 'name()',\n        '[style.--ng-glyph__size]': 'size()',\n        '[style.color]': 'color()',\n        '[style.font-variation-settings]': 'fontVariationSettings()'\n      },\n      styles: [\":host{display:inline-block;width:var(--ng-glyph__size);height:var(--ng-glyph__size);font-size:var(--ng-glyph__size);overflow:hidden}\\n\"]\n    }]\n  }], null, null);\n})();\n\n/**\n * Helper function to create an object that represents a feature.\n */\nfunction createFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\nconst NgIconPreProcessorToken = new InjectionToken('Ng Icon Pre Processor');\nconst NgIconPostProcessorToken = new InjectionToken('Ng Icon Post Processor');\nfunction injectNgIconPreProcessor() {\n  return inject(NgIconPreProcessorToken, {\n    optional: true\n  }) ?? (icon => icon);\n}\nfunction injectNgIconPostProcessor() {\n  return inject(NgIconPostProcessorToken, {\n    optional: true\n  }) ?? (() => {});\n}\nfunction preprocessIcon(icon) {\n  // rename all style attributes to data-style to avoid being blocked by the CSP\n  return icon.replace(/style\\s*=/g, 'data-style=');\n}\nfunction postprocessIcon(element) {\n  // find all elements with a data-style attribute and get the styles from it\n  // and apply them to the element using the style property and remove the data-style attribute\n  const elements = element.querySelectorAll('[data-style]');\n  for (const element of Array.from(elements)) {\n    const styles = element.getAttribute('data-style');\n    styles?.split(';').forEach(style => {\n      const [property, value] = style.split(':');\n      element.style[property.trim()] = value.trim();\n    });\n    element.removeAttribute('data-style');\n  }\n}\n/**\n * Process icons in a way that is compliant with the content security policy\n */\nfunction withContentSecurityPolicy() {\n  return createFeature(0 /* NgIconFeatureKind.ContentSecurityPolicyFeature */, [{\n    provide: NgIconPreProcessorToken,\n    useValue: preprocessIcon\n  }, {\n    provide: NgIconPostProcessorToken,\n    useValue: postprocessIcon\n  }]);\n}\nconst LoggerToken = new InjectionToken('Ng Icon Logger');\n/**\n * The default logger implementation that logs to the console\n */\nclass DefaultLogger {\n  log(message) {\n    console.log(message);\n  }\n  warn(message) {\n    console.warn(message);\n  }\n  error(message) {\n    console.error(message);\n  }\n}\n/**\n * A logger implementation that throws an error on warnings and errors\n */\nclass ExceptionLogger {\n  log(message) {\n    console.log(message);\n  }\n  warn(message) {\n    throw new Error(message);\n  }\n  error(message) {\n    throw new Error(message);\n  }\n}\nfunction injectLogger() {\n  return inject(LoggerToken, {\n    optional: true\n  }) ?? new DefaultLogger();\n}\n/**\n * Throw exceptions on warnings and errors\n */\nfunction withExceptionLogger() {\n  return createFeature(1 /* NgIconFeatureKind.ExceptionLoggerFeature */, [{\n    provide: LoggerToken,\n    useClass: ExceptionLogger\n  }]);\n}\nconst NgIconConfigToken = new InjectionToken('Ng Icon Config');\n/**\n * Provide the configuration for the icons\n * @param config The configuration to use\n */\nfunction provideNgIconsConfig(config, ...features) {\n  return [{\n    provide: NgIconConfigToken,\n    useValue: config\n  }, features.map(feature => feature.ɵproviders)];\n}\n/**\n * Inject the configuration for the icons\n * @returns The configuration to use\n * @internal\n */\nfunction injectNgIconConfig() {\n  return inject(NgIconConfigToken, {\n    optional: true\n  }) ?? {};\n}\nconst NgIconLoaderToken = new InjectionToken('Ng Icon Loader Token');\n/**\n * Helper function to create an object that represents a Loader feature.\n */\nfunction loaderFeature(kind, providers) {\n  return {\n    kind: kind,\n    providers: providers\n  };\n}\nconst NgIconCacheToken = new InjectionToken('Ng Icon Cache Token');\n/**\n * Add caching to the loader. This will prevent the loader from being called multiple times for the same icon name.\n */\nfunction withCaching() {\n  return loaderFeature(0 /* NgIconLoaderFeatureKind.CachingFeature */, [{\n    provide: NgIconCacheToken,\n    useValue: new Map()\n  }]);\n}\n/**\n * Provide a function that will return the SVG content for a given icon name.\n * @param loader The function that will return the SVG content for a given icon name.\n * @param features The list of features to apply to the loader.\n * @returns The SVG content for a given icon name.\n */\nfunction provideNgIconLoader(loader, ...features) {\n  return [{\n    provide: NgIconLoaderToken,\n    useValue: loader\n  }, features.map(feature => feature.providers)];\n}\n/**\n * Inject the function that will return the SVG content for a given icon name.\n */\nfunction injectNgIconLoader() {\n  return inject(NgIconLoaderToken, {\n    optional: true\n  });\n}\n/**\n * Inject the cache that will store the SVG content for a given icon name.\n */\nfunction injectNgIconLoaderCache() {\n  return inject(NgIconCacheToken, {\n    optional: true\n  });\n}\n\n/**\n * Define the icons to use\n * @param icons The icons to provide\n */\nfunction provideIcons(icons) {\n  return [{\n    provide: NgIconsToken,\n    useFactory: (parentIcons = inject(NgIconsToken, {\n      optional: true,\n      skipSelf: true\n    })) => ({\n      ...parentIcons?.reduce((acc, icons) => ({\n        ...acc,\n        ...icons\n      }), {}),\n      ...icons\n    }),\n    multi: true\n  }];\n}\nconst NgIconsToken = new InjectionToken('Icons Token');\n/**\n * Inject the icons to use\n * @returns The icons to use\n * @internal\n */\nfunction injectNgIcons() {\n  return inject(NgIconsToken, {\n    optional: true\n  }) ?? [];\n}\n\n/**\n * A loader may return a promise, an observable or a string. This function will coerce the result into a promise.\n * @returns\n */\nfunction coerceLoaderResult(result) {\n  if (typeof result === 'string') {\n    return Promise.resolve(result);\n  }\n  if (isObservable(result)) {\n    // toPromise is deprecated, but we can't use lastValueFrom because it's not available in RxJS 6\n    // so for now we'll just use toPromise\n    return result.toPromise();\n  }\n  return result;\n}\n\n/**\n * Hyphenated to lowerCamelCase\n */\nfunction toPropertyName(str) {\n  return str.replace(/([^a-zA-Z0-9])+(.)?/g, (_, __, chr) => chr ? chr.toUpperCase() : '').replace(/[^a-zA-Z\\d]/g, '').replace(/^([A-Z])/, m => m.toLowerCase());\n}\nclass NgIcon {\n  constructor() {\n    /** Access the global icon config */\n    this.config = injectNgIconConfig();\n    /** Access the icons */\n    this.icons = injectNgIcons();\n    /** Access the icon loader if defined */\n    this.loader = injectNgIconLoader();\n    /** Access the icon cache if defined */\n    this.cache = injectNgIconLoaderCache();\n    /** Access the pre-processor */\n    this.preProcessor = injectNgIconPreProcessor();\n    /** Access the post-processor */\n    this.postProcessor = injectNgIconPostProcessor();\n    /** Access the injector */\n    this.injector = inject(Injector);\n    /** Access the renderer */\n    this.renderer = inject(Renderer2);\n    /** Determine the platform we are rendering on */\n    this.platform = inject(PLATFORM_ID);\n    /** Access the element ref */\n    this.elementRef = inject(ElementRef);\n    /** Access the logger */\n    this.logger = injectLogger();\n    /** Define the name of the icon to display */\n    this.name = input();\n    /** Define the svg of the icon to display */\n    this.svg = input();\n    /** Define the size of the icon */\n    this.size = input(this.config.size, {\n      transform: coerceCssPixelValue\n    });\n    /** Define the stroke-width of the icon */\n    this.strokeWidth = input(this.config.strokeWidth);\n    /** Define the color of the icon */\n    this.color = input(this.config.color);\n    // update the icon anytime the name or svg changes\n    effect(() => this.updateIcon());\n  }\n  ngOnDestroy() {\n    this.svgElement = undefined;\n  }\n  async updateIcon() {\n    const name = this.name();\n    const svg = this.svg();\n    // if the svg is defined, insert it into the template\n    if (svg !== undefined) {\n      this.setSvg(svg);\n      return;\n    }\n    if (name === undefined) {\n      return;\n    }\n    const propertyName = toPropertyName(name);\n    for (const icons of [...this.icons].reverse()) {\n      if (icons[propertyName]) {\n        // insert the SVG into the template\n        this.setSvg(icons[propertyName]);\n        return;\n      }\n    }\n    // if there is a loader defined, use it to load the icon\n    if (this.loader) {\n      const result = await this.requestIconFromLoader(name);\n      // if the result is a string, insert the SVG into the template\n      if (result !== null) {\n        this.setSvg(result);\n        return;\n      }\n    }\n    // if there is no icon with this name warn the user as they probably forgot to import it\n    this.logger.warn(`No icon named ${name} was found. You may need to import it using the withIcons function.`);\n  }\n  setSvg(svg) {\n    // if we are on the server, simply innerHTML the svg as we don't have the\n    // level of control over the DOM that we do on the client, in otherwords\n    // the approach we take to insert the svg on the client will not work on the server\n    if (isPlatformServer(this.platform)) {\n      this.elementRef.nativeElement.innerHTML = svg;\n      // mark this component as server side rendered\n      this.elementRef.nativeElement.setAttribute('data-ng-icon-ssr', '');\n      return;\n    }\n    // if this was previously server side rendered, we should check if the svg is the same\n    // if it is, we don't need to do anything\n    if (this.elementRef.nativeElement.hasAttribute('data-ng-icon-ssr')) {\n      // if it is different, we need to remove the server side rendered flag\n      this.elementRef.nativeElement.removeAttribute('data-ng-icon-ssr');\n      // retrieve the svg element\n      this.svgElement = this.elementRef.nativeElement.querySelector('svg') ?? undefined;\n      if (this.elementRef.nativeElement.innerHTML === svg) {\n        return;\n      }\n    }\n    // remove the old element\n    if (this.svgElement) {\n      this.renderer.removeChild(this.elementRef.nativeElement, this.svgElement);\n    }\n    // if the svg is empty, don't insert anything\n    if (svg === '') {\n      return;\n    }\n    const template = this.renderer.createElement('template');\n    this.renderer.setProperty(template, 'innerHTML', this.preProcessor(svg));\n    this.svgElement = template.content.firstElementChild;\n    this.postProcessor(this.svgElement);\n    // insert the element into the dom\n    this.renderer.appendChild(this.elementRef.nativeElement, this.svgElement);\n  }\n  /**\n   * Request the icon from the loader.\n   * @param name The name of the icon to load.\n   * @returns The SVG content for a given icon name.\n   */\n  requestIconFromLoader(name) {\n    return new Promise(resolve => {\n      runInInjectionContext(this.injector, async () => {\n        // if we have a cache, check if the icon is already loaded (i.e, it is a string)\n        if (this.cache) {\n          const cachedResult = this.cache.get(name);\n          if (typeof cachedResult === 'string') {\n            resolve(cachedResult);\n            return;\n          }\n          // it may be a promise, so we need to await it\n          if (cachedResult instanceof Promise) {\n            const result = await cachedResult;\n            resolve(result);\n            return;\n          }\n        }\n        const promise = coerceLoaderResult(this.loader(name));\n        // store the promise in the cache so if we get repeated calls (e.g. in a loop) before the loader has resolved\n        // then don't call the loader function multiple times\n        this.cache?.set(name, promise);\n        // await the result of the promise\n        const result = await promise;\n        // if we have a cache, store the result\n        this.cache?.set(name, result);\n        resolve(result);\n      });\n    });\n  }\n  static {\n    this.ɵfac = function NgIcon_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgIcon)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgIcon,\n      selectors: [[\"ng-icon\"]],\n      hostVars: 6,\n      hostBindings: function NgIcon_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵstyleProp(\"--ng-icon__stroke-width\", ctx.strokeWidth())(\"--ng-icon__size\", ctx.size())(\"--ng-icon__color\", ctx.color());\n        }\n      },\n      inputs: {\n        name: [1, \"name\"],\n        svg: [1, \"svg\"],\n        size: [1, \"size\"],\n        strokeWidth: [1, \"strokeWidth\"],\n        color: [1, \"color\"]\n      },\n      decls: 0,\n      vars: 0,\n      template: function NgIcon_Template(rf, ctx) {},\n      styles: [\"[_nghost-%COMP%]{display:inline-block;width:var(--ng-icon__size, 1em);height:var(--ng-icon__size, 1em);line-height:initial;vertical-align:initial;overflow:hidden}[_nghost-%COMP%]     svg{width:inherit;height:inherit;vertical-align:inherit}@layer ng-icon{[_nghost-%COMP%]{color:var(--ng-icon__color, currentColor)}}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIcon, [{\n    type: Component,\n    args: [{\n      selector: 'ng-icon',\n      template: '',\n      standalone: true,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '[style.--ng-icon__stroke-width]': 'strokeWidth()',\n        '[style.--ng-icon__size]': 'size()',\n        '[style.--ng-icon__color]': 'color()'\n      },\n      styles: [\":host{display:inline-block;width:var(--ng-icon__size, 1em);height:var(--ng-icon__size, 1em);line-height:initial;vertical-align:initial;overflow:hidden}:host ::ng-deep svg{width:inherit;height:inherit;vertical-align:inherit}@layer ng-icon{:host{color:var(--ng-icon__color, currentColor)}}\\n\"]\n    }]\n  }], () => [], null);\n})();\nclass NgIconsModule {\n  constructor(icons) {\n    if (Object.keys(icons).length === 0) {\n      throw new Error('No icons have been provided. Ensure to include some icons by importing them using NgIconsModule.withIcons({ ... }).');\n    }\n  }\n  /**\n   * Define the icons that will be included in the application. This allows unused icons to\n   * be tree-shaken away to reduce bundle size\n   * @param icons The object containing the required icons\n   */\n  static withIcons(icons) {\n    return {\n      ngModule: NgIconsModule,\n      providers: provideIcons(icons)\n    };\n  }\n  static {\n    this.ɵfac = function NgIconsModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgIconsModule)(i0.ɵɵinject(NgIconsToken));\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgIconsModule,\n      imports: [NgIcon],\n      exports: [NgIcon]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIconsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgIcon],\n      exports: [NgIcon]\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [NgIconsToken]\n    }]\n  }], null);\n})();\nconst NG_ICON_DIRECTIVES = [NgIcon];\nclass NgIconStack {\n  constructor() {\n    /** The size of the child icons */\n    this.size = input.required();\n  }\n  static {\n    this.ɵfac = function NgIconStack_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgIconStack)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgIconStack,\n      selectors: [[\"ng-icon-stack\"]],\n      hostVars: 2,\n      hostBindings: function NgIconStack_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵstyleProp(\"--ng-icon__size\", ctx.size());\n        }\n      },\n      inputs: {\n        size: [1, \"size\"]\n      },\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function NgIconStack_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      styles: [\"[_nghost-%COMP%]{display:inline-flex;justify-content:center;align-items:center;position:relative;width:var(--ng-icon__size);height:var(--ng-icon__size)}[_nghost-%COMP%]     ng-icon{position:absolute}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgIconStack, [{\n    type: Component,\n    args: [{\n      selector: 'ng-icon-stack',\n      standalone: true,\n      template: '<ng-content />',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '[style.--ng-icon__size]': 'size()'\n      },\n      styles: [\":host{display:inline-flex;justify-content:center;align-items:center;position:relative;width:var(--ng-icon__size);height:var(--ng-icon__size)}:host ::ng-deep ng-icon{position:absolute}\\n\"]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NG_ICON_DIRECTIVES, NgGlyph, NgGlyphConfigToken, NgIcon, NgIconCacheToken, NgIcon as NgIconComponent, NgIconConfigToken, NgIconLoaderToken, NgIconStack, NgIconsModule, NgIconsToken, injectNgGlyphsConfig, injectNgIconConfig, injectNgIconLoader, injectNgIconLoaderCache, injectNgIcons, provideIcons, provideNgGlyphs, provideNgGlyphsConfig, provideNgIconLoader, provideNgIconsConfig, withCaching, withContentSecurityPolicy, withExceptionLogger };\n"],
  "mappings": "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",
  "names": ["glyphset", "element", "icons", "result"]
}
