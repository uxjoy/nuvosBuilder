{
  "version": 3,
  "sources": ["../../../../../../node_modules/@angular/cdk/fesm2022/overlay.mjs", "../../../../../../node_modules/@angular/cdk/fesm2022/dialog.mjs", "../../../../../../node_modules/@spartan-ng/brain/fesm2022/spartan-ng-brain-dialog.mjs"],
  "sourcesContent": ["import { O as OverlayContainer } from './overlay-module-BUj0D19H.mjs';\nexport { B as BlockScrollStrategy, b as CdkConnectedOverlay, C as CdkOverlayOrigin, l as CloseScrollStrategy, i as ConnectedOverlayPositionChange, g as ConnectionPositionPair, F as FlexibleConnectedPositionStrategy, G as GlobalPositionStrategy, N as NoopScrollStrategy, a as Overlay, f as OverlayConfig, o as OverlayKeyboardDispatcher, m as OverlayModule, n as OverlayOutsideClickDispatcher, d as OverlayPositionBuilder, c as OverlayRef, R as RepositionScrollStrategy, S as STANDARD_DROPDOWN_ADJACENT_POSITIONS, e as STANDARD_DROPDOWN_BELOW_POSITIONS, k as ScrollStrategyOptions, h as ScrollingVisibility, j as validateHorizontalPosition, v as validateVerticalPosition } from './overlay-module-BUj0D19H.mjs';\nimport * as i0 from '@angular/core';\nimport { inject, RendererFactory2, Injectable } from '@angular/core';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkFixedSizeVirtualScroll as ɵɵCdkFixedSizeVirtualScroll, CdkScrollableModule as ɵɵCdkScrollableModule, CdkVirtualForOf as ɵɵCdkVirtualForOf, CdkVirtualScrollViewport as ɵɵCdkVirtualScrollViewport, CdkVirtualScrollableElement as ɵɵCdkVirtualScrollableElement, CdkVirtualScrollableWindow as ɵɵCdkVirtualScrollableWindow } from './scrolling.mjs';\nexport { Dir as ɵɵDir } from './bidi.mjs';\nimport '@angular/common';\nimport './platform-DmdVEw_C.mjs';\nimport './backwards-compatibility-DHR38MsD.mjs';\nimport './shadow-dom-B0oHn41l.mjs';\nimport './test-environment-CT0XxPyp.mjs';\nimport './style-loader-Cu9AvjH9.mjs';\nimport 'rxjs';\nimport 'rxjs/operators';\nimport './css-pixel-value-C_HEqLhI.mjs';\nimport './array-I1yfCXUO.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './portal-directives-Bw5woq8I.mjs';\nimport './directionality-CBXD4hga.mjs';\nimport './id-generator-Dw_9dSDu.mjs';\nimport './keycodes-CpHkExLC.mjs';\nimport './keycodes.mjs';\nimport './element-x4z00URv.mjs';\nimport './recycle-view-repeater-strategy-DoWdPqVw.mjs';\nimport './data-source-D34wiQZj.mjs';\n\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n  _renderer = inject(RendererFactory2).createRenderer(null, null);\n  _fullScreenEventName;\n  _cleanupFullScreenListener;\n  constructor() {\n    super();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._cleanupFullScreenListener?.();\n  }\n  _createContainer() {\n    const eventName = this._getEventName();\n    super._createContainer();\n    this._adjustParentForFullscreenChange();\n    if (eventName) {\n      this._cleanupFullScreenListener?.();\n      this._cleanupFullScreenListener = this._renderer.listen('document', eventName, () => {\n        this._adjustParentForFullscreenChange();\n      });\n    }\n  }\n  _adjustParentForFullscreenChange() {\n    if (this._containerElement) {\n      const fullscreenElement = this.getFullscreenElement();\n      const parent = fullscreenElement || this._document.body;\n      parent.appendChild(this._containerElement);\n    }\n  }\n  _getEventName() {\n    if (!this._fullScreenEventName) {\n      const _document = this._document;\n      if (_document.fullscreenEnabled) {\n        this._fullScreenEventName = 'fullscreenchange';\n      } else if (_document.webkitFullscreenEnabled) {\n        this._fullScreenEventName = 'webkitfullscreenchange';\n      } else if (_document.mozFullScreenEnabled) {\n        this._fullScreenEventName = 'mozfullscreenchange';\n      } else if (_document.msFullscreenEnabled) {\n        this._fullScreenEventName = 'MSFullscreenChange';\n      }\n    }\n    return this._fullScreenEventName;\n  }\n  /**\n   * When the page is put into fullscreen mode, a specific element is specified.\n   * Only that element and its children are visible when in fullscreen mode.\n   */\n  getFullscreenElement() {\n    const _document = this._document;\n    return _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement || null;\n  }\n  static ɵfac = function FullscreenOverlayContainer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FullscreenOverlayContainer)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FullscreenOverlayContainer,\n    factory: FullscreenOverlayContainer.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\nexport { FullscreenOverlayContainer, OverlayContainer };\n", "import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ElementRef, NgZone, Renderer2, ChangeDetectorRef, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, InjectionToken, TemplateRef, Injectable, NgModule } from '@angular/core';\nimport { B as BasePortalOutlet, f as CdkPortalOutlet, C as ComponentPortal, T as TemplatePortal, h as PortalModule } from './portal-directives-Bw5woq8I.mjs';\nfunction CdkDialogContainer_ng_template_0_Template(rf, ctx) {}\nexport { d as ɵɵCdkPortal, g as ɵɵPortalHostDirective, e as ɵɵTemplatePortalDirective } from './portal-directives-Bw5woq8I.mjs';\nimport { F as FocusTrapFactory, I as InteractivityChecker, A as A11yModule } from './a11y-module-BYox5gpI.mjs';\nimport { c as OverlayRef, a as Overlay, O as OverlayContainer, f as OverlayConfig, m as OverlayModule } from './overlay-module-BUj0D19H.mjs';\nimport { F as FocusMonitor } from './focus-monitor-e2l_RpN3.mjs';\nimport { P as Platform } from './platform-DmdVEw_C.mjs';\nimport { c as _getFocusedElementPierceShadowDom } from './shadow-dom-B0oHn41l.mjs';\nimport { Subject, defer, of } from 'rxjs';\nimport { g as ESCAPE } from './keycodes-CpHkExLC.mjs';\nimport { hasModifierKey } from './keycodes.mjs';\nimport { startWith } from 'rxjs/operators';\nimport { _ as _IdGenerator } from './id-generator-Dw_9dSDu.mjs';\nimport { D as Directionality } from './directionality-CBXD4hga.mjs';\nimport './style-loader-Cu9AvjH9.mjs';\nimport './private.mjs';\nimport './breakpoints-observer-CljOfYGy.mjs';\nimport './array-I1yfCXUO.mjs';\nimport './observers.mjs';\nimport './element-x4z00URv.mjs';\nimport './backwards-compatibility-DHR38MsD.mjs';\nimport './test-environment-CT0XxPyp.mjs';\nimport './css-pixel-value-C_HEqLhI.mjs';\nimport './scrolling.mjs';\nimport './scrolling-BkvA05C8.mjs';\nimport './bidi.mjs';\nimport './recycle-view-repeater-strategy-DoWdPqVw.mjs';\nimport './data-source-D34wiQZj.mjs';\nimport './fake-event-detection-DWOdFTFz.mjs';\nimport './passive-listeners-esHZRgIN.mjs';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef;\n  /**\n   * Injector used for the instantiation of the component to be attached. If provided,\n   * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n   */\n  injector;\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id;\n  /** The ARIA role of the dialog element. */\n  role = 'dialog';\n  /** Optional CSS class or classes applied to the overlay panel. */\n  panelClass = '';\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop = true;\n  /** Optional CSS class or classes applied to the overlay backdrop. */\n  backdropClass = '';\n  /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n  disableClose = false;\n  /** Width of the dialog. */\n  width = '';\n  /** Height of the dialog. */\n  height = '';\n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  minWidth;\n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  minHeight;\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n  maxWidth;\n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  maxHeight;\n  /** Strategy to use when positioning the dialog. Defaults to centering it on the page. */\n  positionStrategy;\n  /** Data being injected into the child component. */\n  data = null;\n  /** Layout direction for the dialog's content. */\n  direction;\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n  ariaLabelledBy = null;\n  /** Dialog label applied via `aria-label` */\n  ariaLabel = null;\n  /**\n   * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n   * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n   * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n   */\n  ariaModal = false;\n  /**\n   * Where the dialog should focus on open.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n   * AutoFocusTarget instead.\n   */\n  autoFocus = 'first-tabbable';\n  /**\n   * Whether the dialog should restore focus to the previously-focused element upon closing.\n   * Has the following behavior based on the type that is passed in:\n   * - `boolean` - when true, will return focus to the element that was focused before the dialog\n   *    was opened, otherwise won't restore focus at all.\n   * - `string` - focus will be restored to the first element that matches the CSS selector.\n   * - `HTMLElement` - focus will be restored to the specific element.\n   */\n  restoreFocus = true;\n  /**\n   * Scroll strategy to be used for the dialog. This determines how\n   * the dialog responds to scrolling underneath the panel element.\n   */\n  scrollStrategy;\n  /**\n   * Whether the dialog should close when the user navigates backwards or forwards through browser\n   * history. This does not apply to navigation via anchor element unless using URL-hash based\n   * routing (`HashLocationStrategy` in the Angular router).\n   */\n  closeOnNavigation = true;\n  /**\n   * Whether the dialog should close when the dialog service is destroyed. This is useful if\n   * another service is wrapping the dialog and is managing the destruction instead.\n   */\n  closeOnDestroy = true;\n  /**\n   * Whether the dialog should close when the underlying overlay is detached. This is useful if\n   * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n   * external detachment can happen as a result of a scroll strategy triggering it or when the\n   * browser location changes.\n   */\n  closeOnOverlayDetachments = true;\n  /**\n   * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n   * @deprecated No longer used. Will be removed.\n   * @breaking-change 20.0.0\n   */\n  componentFactoryResolver;\n  /**\n   * Providers that will be exposed to the contents of the dialog. Can also\n   * be provided as a function in order to generate the providers lazily.\n   */\n  providers;\n  /**\n   * Component into which the dialog content will be rendered. Defaults to `CdkDialogContainer`.\n   * A configuration object can be passed in to customize the providers that will be exposed\n   * to the dialog container.\n   */\n  container;\n  /**\n   * Context that will be passed to template-based dialogs.\n   * A function can be passed in to resolve the context lazily.\n   */\n  templateContext;\n}\nfunction throwDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n  _elementRef = inject(ElementRef);\n  _focusTrapFactory = inject(FocusTrapFactory);\n  _config;\n  _interactivityChecker = inject(InteractivityChecker);\n  _ngZone = inject(NgZone);\n  _overlayRef = inject(OverlayRef);\n  _focusMonitor = inject(FocusMonitor);\n  _renderer = inject(Renderer2);\n  _platform = inject(Platform);\n  _document = inject(DOCUMENT, {\n    optional: true\n  });\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  _portalOutlet;\n  /** The class that traps and manages focus within the dialog. */\n  _focusTrap = null;\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  _elementFocusedBeforeDialogWasOpened = null;\n  /**\n   * Type of interaction that led to the dialog being closed. This is used to determine\n   * whether the focus style will be applied when returning focus to its original location\n   * after the dialog is closed.\n   */\n  _closeInteractionType = null;\n  /**\n   * Queue of the IDs of the dialog's label element, based on their definition order. The first\n   * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n   * where there are two or more titles in the DOM at a time and the first one is destroyed while\n   * the rest are present.\n   */\n  _ariaLabelledByQueue = [];\n  _changeDetectorRef = inject(ChangeDetectorRef);\n  _injector = inject(Injector);\n  _isDestroyed = false;\n  constructor() {\n    super();\n    // Callback is primarily for some internal tests\n    // that were instantiating the dialog container manually.\n    this._config = inject(DialogConfig, {\n      optional: true\n    }) || new DialogConfig();\n    if (this._config.ariaLabelledBy) {\n      this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n    }\n  }\n  _addAriaLabelledBy(id) {\n    this._ariaLabelledByQueue.push(id);\n    this._changeDetectorRef.markForCheck();\n  }\n  _removeAriaLabelledBy(id) {\n    const index = this._ariaLabelledByQueue.indexOf(id);\n    if (index > -1) {\n      this._ariaLabelledByQueue.splice(index, 1);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  _contentAttached() {\n    this._initializeFocusTrap();\n    this._handleBackdropClicks();\n    this._captureInitialFocus();\n  }\n  /**\n   * Can be used by child classes to customize the initial focus\n   * capturing behavior (e.g. if it's tied to an animation).\n   */\n  _captureInitialFocus() {\n    this._trapFocus();\n  }\n  ngOnDestroy() {\n    this._isDestroyed = true;\n    this._restoreFocus();\n  }\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n    const result = this._portalOutlet.attachComponentPortal(portal);\n    this._contentAttached();\n    return result;\n  }\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal(portal) {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n    const result = this._portalOutlet.attachTemplatePortal(portal);\n    this._contentAttached();\n    return result;\n  }\n  /**\n   * Attaches a DOM portal to the dialog container.\n   * @param portal Portal to be attached.\n   * @deprecated To be turned into a method.\n   * @breaking-change 10.0.0\n   */\n  attachDomPortal = portal => {\n    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwDialogContentAlreadyAttachedError();\n    }\n    const result = this._portalOutlet.attachDomPortal(portal);\n    this._contentAttached();\n    return result;\n  };\n  // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n  /** Captures focus if it isn't already inside the dialog. */\n  _recaptureFocus() {\n    if (!this._containsFocus()) {\n      this._trapFocus();\n    }\n  }\n  /**\n   * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n   * attribute to forcefully focus it. The attribute is removed after focus is moved.\n   * @param element The element to focus.\n   */\n  _forceFocus(element, options) {\n    if (!this._interactivityChecker.isFocusable(element)) {\n      element.tabIndex = -1;\n      // The tabindex attribute should be removed to avoid navigating to that element again\n      this._ngZone.runOutsideAngular(() => {\n        const callback = () => {\n          deregisterBlur();\n          deregisterMousedown();\n          element.removeAttribute('tabindex');\n        };\n        const deregisterBlur = this._renderer.listen(element, 'blur', callback);\n        const deregisterMousedown = this._renderer.listen(element, 'mousedown', callback);\n      });\n    }\n    element.focus(options);\n  }\n  /**\n   * Focuses the first element that matches the given selector within the focus trap.\n   * @param selector The CSS selector for the element to set focus to.\n   */\n  _focusByCssSelector(selector, options) {\n    let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n    if (elementToFocus) {\n      this._forceFocus(elementToFocus, options);\n    }\n  }\n  /**\n   * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n   * cannot be moved then focus will go to the dialog container.\n   */\n  _trapFocus(options) {\n    if (this._isDestroyed) {\n      return;\n    }\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait until after the next render.\n    afterNextRender(() => {\n      const element = this._elementRef.nativeElement;\n      switch (this._config.autoFocus) {\n        case false:\n        case 'dialog':\n          // Ensure that focus is on the dialog container. It's possible that a different\n          // component tried to move focus while the open animation was running. See:\n          // https://github.com/angular/components/issues/16215. Note that we only want to do this\n          // if the focus isn't inside the dialog already, because it's possible that the consumer\n          // turned off `autoFocus` in order to move focus themselves.\n          if (!this._containsFocus()) {\n            element.focus(options);\n          }\n          break;\n        case true:\n        case 'first-tabbable':\n          const focusedSuccessfully = this._focusTrap?.focusInitialElement(options);\n          // If we weren't able to find a focusable element in the dialog, then focus the dialog\n          // container instead.\n          if (!focusedSuccessfully) {\n            this._focusDialogContainer(options);\n          }\n          break;\n        case 'first-heading':\n          this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]', options);\n          break;\n        default:\n          this._focusByCssSelector(this._config.autoFocus, options);\n          break;\n      }\n    }, {\n      injector: this._injector\n    });\n  }\n  /** Restores focus to the element that was focused before the dialog opened. */\n  _restoreFocus() {\n    const focusConfig = this._config.restoreFocus;\n    let focusTargetElement = null;\n    if (typeof focusConfig === 'string') {\n      focusTargetElement = this._document.querySelector(focusConfig);\n    } else if (typeof focusConfig === 'boolean') {\n      focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n    } else if (focusConfig) {\n      focusTargetElement = focusConfig;\n    }\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && focusTargetElement && typeof focusTargetElement.focus === 'function') {\n      const activeElement = _getFocusedElementPierceShadowDom();\n      const element = this._elementRef.nativeElement;\n      // Make sure that focus is still inside the dialog or is on the body (usually because a\n      // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n      // the consumer moved it themselves before the animation was done, in which case we shouldn't\n      // do anything.\n      if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {\n        if (this._focusMonitor) {\n          this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n          this._closeInteractionType = null;\n        } else {\n          focusTargetElement.focus();\n        }\n      }\n    }\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n  /** Focuses the dialog container. */\n  _focusDialogContainer(options) {\n    // Note that there is no focus method when rendering on the server.\n    if (this._elementRef.nativeElement.focus) {\n      this._elementRef.nativeElement.focus(options);\n    }\n  }\n  /** Returns whether focus is inside the dialog. */\n  _containsFocus() {\n    const element = this._elementRef.nativeElement;\n    const activeElement = _getFocusedElementPierceShadowDom();\n    return element === activeElement || element.contains(activeElement);\n  }\n  /** Sets up the focus trap. */\n  _initializeFocusTrap() {\n    if (this._platform.isBrowser) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n      // Save the previously focused element. This element will be re-focused\n      // when the dialog closes.\n      if (this._document) {\n        this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n      }\n    }\n  }\n  /** Sets up the listener that handles clicks on the dialog backdrop. */\n  _handleBackdropClicks() {\n    // Clicking on the backdrop will move focus out of dialog.\n    // Recapture it if closing via the backdrop is disabled.\n    this._overlayRef.backdropClick().subscribe(() => {\n      if (this._config.disableClose) {\n        this._recaptureFocus();\n      }\n    });\n  }\n  static ɵfac = function CdkDialogContainer_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CdkDialogContainer)();\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CdkDialogContainer,\n    selectors: [[\"cdk-dialog-container\"]],\n    viewQuery: function CdkDialogContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(CdkPortalOutlet, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n      }\n    },\n    hostAttrs: [\"tabindex\", \"-1\", 1, \"cdk-dialog-container\"],\n    hostVars: 6,\n    hostBindings: function CdkDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"id\", ctx._config.id || null)(\"role\", ctx._config.role)(\"aria-modal\", ctx._config.ariaModal)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledByQueue[0])(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function CdkDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CdkDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    dependencies: [CdkPortalOutlet],\n    styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\\n\"],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDialogContainer, [{\n    type: Component,\n    args: [{\n      selector: 'cdk-dialog-container',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      imports: [CdkPortalOutlet],\n      host: {\n        'class': 'cdk-dialog-container',\n        'tabindex': '-1',\n        '[attr.id]': '_config.id || null',\n        '[attr.role]': '_config.role',\n        '[attr.aria-modal]': '_config.ariaModal',\n        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n        '[attr.aria-label]': '_config.ariaLabel',\n        '[attr.aria-describedby]': '_config.ariaDescribedBy || null'\n      },\n      template: \"<ng-template cdkPortalOutlet />\\n\",\n      styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\\n\"]\n    }]\n  }], () => [], {\n    _portalOutlet: [{\n      type: ViewChild,\n      args: [CdkPortalOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n  overlayRef;\n  config;\n  /**\n   * Instance of component opened into the dialog. Will be\n   * null when the dialog is opened using a `TemplateRef`.\n   */\n  componentInstance;\n  /**\n   * `ComponentRef` of the component opened into the dialog. Will be\n   * null when the dialog is opened using a `TemplateRef`.\n   */\n  componentRef;\n  /** Instance of the container that is rendering out the dialog content. */\n  containerInstance;\n  /** Whether the user is allowed to close the dialog. */\n  disableClose;\n  /** Emits when the dialog has been closed. */\n  closed = new Subject();\n  /** Emits when the backdrop of the dialog is clicked. */\n  backdropClick;\n  /** Emits when on keyboard events within the dialog. */\n  keydownEvents;\n  /** Emits on pointer events that happen outside of the dialog. */\n  outsidePointerEvents;\n  /** Unique ID for the dialog. */\n  id;\n  /** Subscription to external detachments of the dialog. */\n  _detachSubscription;\n  constructor(overlayRef, config) {\n    this.overlayRef = overlayRef;\n    this.config = config;\n    this.disableClose = config.disableClose;\n    this.backdropClick = overlayRef.backdropClick();\n    this.keydownEvents = overlayRef.keydownEvents();\n    this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n    this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n    this.keydownEvents.subscribe(event => {\n      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n        event.preventDefault();\n        this.close(undefined, {\n          focusOrigin: 'keyboard'\n        });\n      }\n    });\n    this.backdropClick.subscribe(() => {\n      if (!this.disableClose) {\n        this.close(undefined, {\n          focusOrigin: 'mouse'\n        });\n      }\n    });\n    this._detachSubscription = overlayRef.detachments().subscribe(() => {\n      // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n      if (config.closeOnOverlayDetachments !== false) {\n        this.close();\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param result Optional result to return to the dialog opener.\n   * @param options Additional options to customize the closing behavior.\n   */\n  close(result, options) {\n    if (this.containerInstance) {\n      const closedSubject = this.closed;\n      this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n      // Drop the detach subscription first since it can be triggered by the\n      // `dispose` call and override the result of this closing sequence.\n      this._detachSubscription.unsubscribe();\n      this.overlayRef.dispose();\n      closedSubject.next(result);\n      closedSubject.complete();\n      this.componentInstance = this.containerInstance = null;\n    }\n  }\n  /** Updates the position of the dialog based on the current position strategy. */\n  updatePosition() {\n    this.overlayRef.updatePosition();\n    return this;\n  }\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width = '', height = '') {\n    this.overlayRef.updateSize({\n      width,\n      height\n    });\n    return this;\n  }\n  /** Add a CSS class or an array of classes to the overlay pane. */\n  addPanelClass(classes) {\n    this.overlayRef.addPanelClass(classes);\n    return this;\n  }\n  /** Remove a CSS class or an array of classes from the overlay pane. */\n  removePanelClass(classes) {\n    this.overlayRef.removePanelClass(classes);\n    return this;\n  }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n  providedIn: 'root',\n  factory: () => {\n    const overlay = inject(Overlay);\n    return () => overlay.scrollStrategies.block();\n  }\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\nclass Dialog {\n  _overlay = inject(Overlay);\n  _injector = inject(Injector);\n  _defaultOptions = inject(DEFAULT_DIALOG_CONFIG, {\n    optional: true\n  });\n  _parentDialog = inject(Dialog, {\n    optional: true,\n    skipSelf: true\n  });\n  _overlayContainer = inject(OverlayContainer);\n  _idGenerator = inject(_IdGenerator);\n  _openDialogsAtThisLevel = [];\n  _afterAllClosedAtThisLevel = new Subject();\n  _afterOpenedAtThisLevel = new Subject();\n  _ariaHiddenElements = new Map();\n  _scrollStrategy = inject(DIALOG_SCROLL_STRATEGY);\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs() {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened() {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(undefined)));\n  constructor() {}\n  open(componentOrTemplateRef, config) {\n    const defaults = this._defaultOptions || new DialogConfig();\n    config = {\n      ...defaults,\n      ...config\n    };\n    config.id = config.id || this._idGenerator.getId('cdk-dialog-');\n    if (config.id && this.getDialogById(config.id) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n    const overlayConfig = this._getOverlayConfig(config);\n    const overlayRef = this._overlay.create(overlayConfig);\n    const dialogRef = new DialogRef(overlayRef, config);\n    const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n    dialogRef.containerInstance = dialogContainer;\n    this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n    this.openDialogs.push(dialogRef);\n    dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n    this.afterOpened.next(dialogRef);\n    return dialogRef;\n  }\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll() {\n    reverseForEach(this.openDialogs, dialog => dialog.close());\n  }\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id) {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n  ngOnDestroy() {\n    // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n    // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n    // determines when `aria-hidden` is removed from elements outside the dialog.\n    reverseForEach(this._openDialogsAtThisLevel, dialog => {\n      // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n      if (dialog.config.closeOnDestroy === false) {\n        this._removeOpenDialog(dialog, false);\n      }\n    });\n    // Make a second pass and close the remaining dialogs. We do this second pass in order to\n    // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n    // that should be closed and dialogs that should not.\n    reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n    this._afterAllClosedAtThisLevel.complete();\n    this._afterOpenedAtThisLevel.complete();\n    this._openDialogsAtThisLevel = [];\n  }\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param config The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  _getOverlayConfig(config) {\n    const state = new OverlayConfig({\n      positionStrategy: config.positionStrategy || this._overlay.position().global().centerHorizontally().centerVertically(),\n      scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n      panelClass: config.panelClass,\n      hasBackdrop: config.hasBackdrop,\n      direction: config.direction,\n      minWidth: config.minWidth,\n      minHeight: config.minHeight,\n      maxWidth: config.maxWidth,\n      maxHeight: config.maxHeight,\n      width: config.width,\n      height: config.height,\n      disposeOnNavigation: config.closeOnNavigation\n    });\n    if (config.backdropClass) {\n      state.backdropClass = config.backdropClass;\n    }\n    return state;\n  }\n  /**\n   * Attaches a dialog container to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  _attachContainer(overlay, dialogRef, config) {\n    const userInjector = config.injector || config.viewContainerRef?.injector;\n    const providers = [{\n      provide: DialogConfig,\n      useValue: config\n    }, {\n      provide: DialogRef,\n      useValue: dialogRef\n    }, {\n      provide: OverlayRef,\n      useValue: overlay\n    }];\n    let containerType;\n    if (config.container) {\n      if (typeof config.container === 'function') {\n        containerType = config.container;\n      } else {\n        containerType = config.container.type;\n        providers.push(...config.container.providers(config));\n      }\n    } else {\n      containerType = CdkDialogContainer;\n    }\n    const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({\n      parent: userInjector || this._injector,\n      providers\n    }));\n    const containerRef = overlay.attach(containerPortal);\n    return containerRef.instance;\n  }\n  /**\n   * Attaches the user-provided component to the already-created dialog container.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @param config Configuration used to open the dialog.\n   */\n  _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n      let context = {\n        $implicit: config.data,\n        dialogRef\n      };\n      if (config.templateContext) {\n        context = {\n          ...context,\n          ...(typeof config.templateContext === 'function' ? config.templateContext() : config.templateContext)\n        };\n      }\n      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n    } else {\n      const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n      dialogRef.componentRef = contentRef;\n      dialogRef.componentInstance = contentRef.instance;\n    }\n  }\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog being opened.\n   * @param dialogContainer Component that is going to wrap the dialog content.\n   * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n   * dialog injector, if the user didn't provide a custom one.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n    const userInjector = config.injector || config.viewContainerRef?.injector;\n    const providers = [{\n      provide: DIALOG_DATA,\n      useValue: config.data\n    }, {\n      provide: DialogRef,\n      useValue: dialogRef\n    }];\n    if (config.providers) {\n      if (typeof config.providers === 'function') {\n        providers.push(...config.providers(dialogRef, config, dialogContainer));\n      } else {\n        providers.push(...config.providers);\n      }\n    }\n    if (config.direction && (!userInjector || !userInjector.get(Directionality, null, {\n      optional: true\n    }))) {\n      providers.push({\n        provide: Directionality,\n        useValue: {\n          value: config.direction,\n          change: of()\n        }\n      });\n    }\n    return Injector.create({\n      parent: userInjector || fallbackInjector,\n      providers\n    });\n  }\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   * @param emitEvent Whether to emit an event if this is the last dialog.\n   */\n  _removeOpenDialog(dialogRef, emitEvent) {\n    const index = this.openDialogs.indexOf(dialogRef);\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n        this._ariaHiddenElements.clear();\n        if (emitEvent) {\n          this._getAfterAllClosed().next();\n        }\n      }\n    }\n  }\n  /** Hides all of the content that isn't an overlay from assistive technology. */\n  _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n      for (let i = siblings.length - 1; i > -1; i--) {\n        const sibling = siblings[i];\n        if (sibling !== overlayContainer && sibling.nodeName !== 'SCRIPT' && sibling.nodeName !== 'STYLE' && !sibling.hasAttribute('aria-live')) {\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n  _getAfterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n  }\n  static ɵfac = function Dialog_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || Dialog)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: Dialog,\n    factory: Dialog.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Dialog, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [], null);\n})();\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n  let i = items.length;\n  while (i--) {\n    callback(items[i]);\n  }\n}\nclass DialogModule {\n  static ɵfac = function DialogModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DialogModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: DialogModule,\n    imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n    exports: [\n    // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n    // don't have to remember to import it or be faced with an unhelpful error.\n    PortalModule, CdkDialogContainer]\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [Dialog],\n    imports: [OverlayModule, PortalModule, A11yModule,\n    // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n    // don't have to remember to import it or be faced with an unhelpful error.\n    PortalModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n      exports: [\n      // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n      // don't have to remember to import it or be faced with an unhelpful error.\n      PortalModule, CdkDialogContainer],\n      providers: [Dialog]\n    }]\n  }], null, null);\n})();\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError, CdkPortalOutlet as ɵɵCdkPortalOutlet };\n", "import * as i0 from '@angular/core';\nimport { inject, input, Directive, InjectionToken, RendererFactory2, Injector, signal, computed, runInInjectionContext, effect, Injectable, ViewContainerRef, output, booleanAttribute, untracked, numberAttribute, ViewEncapsulation, ChangeDetectionStrategy, Component, TemplateRef, NgModule } from '@angular/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil, filter } from 'rxjs/operators';\nimport { provideExposesStateProviderExisting, provideCustomClassSettableExisting } from '@spartan-ng/brain/core';\nimport { OverlayPositionBuilder, ScrollStrategyOptions } from '@angular/cdk/overlay';\nimport { DIALOG_DATA, Dialog } from '@angular/cdk/dialog';\n\n// brn-dialog-utils.ts\nconst _c0 = [\"*\"];\nconst cssClassesToArray = (classes, defaultClass = '') => {\n  if (typeof classes === 'string') {\n    const splitClasses = classes.trim().split(' ');\n    if (splitClasses.length === 0) {\n      return [defaultClass];\n    }\n    return splitClasses;\n  }\n  return classes ?? [];\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass BrnDialogRef {\n  _cdkDialogRef;\n  _open;\n  state;\n  dialogId;\n  _options;\n  _closing$ = new Subject();\n  closing$ = this._closing$.asObservable();\n  closed$;\n  _previousTimeout;\n  get open() {\n    return this.state() === 'open';\n  }\n  constructor(_cdkDialogRef, _open, state, dialogId, _options) {\n    this._cdkDialogRef = _cdkDialogRef;\n    this._open = _open;\n    this.state = state;\n    this.dialogId = dialogId;\n    this._options = _options;\n    this.closed$ = this._cdkDialogRef.closed.pipe(take(1));\n  }\n  close(result, delay = this._options?.closeDelay ?? 0) {\n    if (!this.open || this._options?.disableClose) return;\n    this._closing$.next();\n    this._open.set(false);\n    if (this._previousTimeout) {\n      clearTimeout(this._previousTimeout);\n    }\n    this._previousTimeout = setTimeout(() => {\n      this._cdkDialogRef.close(result);\n    }, delay);\n  }\n  setPanelClass(paneClass) {\n    this._cdkDialogRef.config.panelClass = cssClassesToArray(paneClass);\n  }\n  setOverlayClass(overlayClass) {\n    this._cdkDialogRef.config.backdropClass = cssClassesToArray(overlayClass);\n  }\n  setAriaDescribedBy(ariaDescribedBy) {\n    this._cdkDialogRef.config.ariaDescribedBy = ariaDescribedBy;\n  }\n  setAriaLabelledBy(ariaLabelledBy) {\n    this._cdkDialogRef.config.ariaLabelledBy = ariaLabelledBy;\n  }\n  setAriaLabel(ariaLabel) {\n    this._cdkDialogRef.config.ariaLabel = ariaLabel;\n  }\n}\nclass BrnDialogCloseDirective {\n  _brnDialogRef = inject(BrnDialogRef);\n  delay = input(undefined, {\n    transform: coerceNumberProperty\n  });\n  close() {\n    this._brnDialogRef.close(undefined, this.delay());\n  }\n  /** @nocollapse */\n  static ɵfac = function BrnDialogCloseDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BrnDialogCloseDirective)();\n  };\n  /** @nocollapse */\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BrnDialogCloseDirective,\n    selectors: [[\"button\", \"brnDialogClose\", \"\"]],\n    hostBindings: function BrnDialogCloseDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function BrnDialogCloseDirective_click_HostBindingHandler() {\n          return ctx.close();\n        });\n      }\n    },\n    inputs: {\n      delay: [1, \"delay\"]\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrnDialogCloseDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'button[brnDialogClose]',\n      standalone: true,\n      host: {\n        '(click)': 'close()'\n      }\n    }]\n  }], null, null);\n})();\nconst defaultOptions = {\n  attachPositions: [],\n  autoFocus: 'first-tabbable',\n  closeDelay: 100,\n  closeOnBackdropClick: true,\n  closeOnOutsidePointerEvents: false,\n  disableClose: false,\n  hasBackdrop: true,\n  positionStrategy: null,\n  restoreFocus: true,\n  role: 'dialog',\n  scrollStrategy: null\n};\nconst BRN_DIALOG_DEFAULT_OPTIONS = new InjectionToken('brn-dialog-default-options', {\n  providedIn: 'root',\n  factory: () => defaultOptions\n});\nfunction provideBrnDialogDefaultOptions(options) {\n  return {\n    provide: BRN_DIALOG_DEFAULT_OPTIONS,\n    useValue: {\n      ...defaultOptions,\n      ...options\n    }\n  };\n}\nfunction injectBrnDialogDefaultOptions() {\n  return inject(BRN_DIALOG_DEFAULT_OPTIONS, {\n    optional: true\n  }) ?? defaultOptions;\n}\nlet dialogSequence = 0;\n/** @deprecated `injectBrnDialogCtx` will no longer be supported once components are stable. Use `injectBrnDialogContext` instead.  */\nconst injectBrnDialogCtx = () => {\n  return inject(DIALOG_DATA);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst injectBrnDialogContext = (options = {}) => {\n  return inject(DIALOG_DATA, options);\n};\nclass BrnDialogService {\n  _cdkDialog = inject(Dialog);\n  _rendererFactory = inject(RendererFactory2);\n  _renderer = this._rendererFactory.createRenderer(null, null);\n  _positionBuilder = inject(OverlayPositionBuilder);\n  _sso = inject(ScrollStrategyOptions);\n  _injector = inject(Injector);\n  open(content, vcr, context, options) {\n    if (options?.id && this._cdkDialog.getDialogById(options.id)) {\n      throw new Error(`Dialog with ID: ${options.id} already exists`);\n    }\n    const positionStrategy = options?.positionStrategy ?? (options?.attachTo && options?.attachPositions && options?.attachPositions?.length > 0 ? this._positionBuilder?.flexibleConnectedTo(options.attachTo).withPositions(options.attachPositions ?? []) : this._positionBuilder.global().centerHorizontally().centerVertically());\n    let brnDialogRef;\n    let effectRef;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const contextOrData = {\n      ...context,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      close: (result = undefined) => brnDialogRef.close(result, options?.closeDelay)\n    };\n    const destroyed$ = new Subject();\n    const open = signal(true);\n    const state = computed(() => open() ? 'open' : 'closed');\n    const dialogId = dialogSequence++;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const cdkDialogRef = this._cdkDialog.open(content, {\n      id: options?.id ?? `brn-dialog-${dialogId}`,\n      role: options?.role,\n      viewContainerRef: vcr,\n      templateContext: () => ({\n        $implicit: contextOrData\n      }),\n      data: contextOrData,\n      hasBackdrop: options?.hasBackdrop,\n      panelClass: cssClassesToArray(options?.panelClass),\n      backdropClass: cssClassesToArray(options?.backdropClass, 'bg-transparent'),\n      positionStrategy,\n      scrollStrategy: options?.scrollStrategy ?? this._sso?.block(),\n      restoreFocus: options?.restoreFocus,\n      disableClose: true,\n      autoFocus: options?.autoFocus ?? 'first-tabbable',\n      ariaDescribedBy: options?.ariaDescribedBy ?? `brn-dialog-description-${dialogId}`,\n      ariaLabelledBy: options?.ariaLabelledBy ?? `brn-dialog-title-${dialogId}`,\n      ariaLabel: options?.ariaLabel,\n      ariaModal: options?.ariaModal,\n      providers: cdkDialogRef => {\n        brnDialogRef = new BrnDialogRef(cdkDialogRef, open, state, dialogId, options);\n        runInInjectionContext(this._injector, () => {\n          effectRef = effect(() => {\n            if (overlay) {\n              this._renderer.setAttribute(overlay, 'data-state', state());\n            }\n            if (backdrop) {\n              this._renderer.setAttribute(backdrop, 'data-state', state());\n            }\n          });\n        });\n        const providers = [{\n          provide: BrnDialogRef,\n          useValue: brnDialogRef\n        }];\n        if (options?.providers) {\n          if (typeof options.providers === 'function') {\n            providers.push(...options.providers());\n          }\n          if (Array.isArray(options.providers)) {\n            providers.push(...options.providers);\n          }\n        }\n        return providers;\n      }\n    });\n    const overlay = cdkDialogRef.overlayRef.overlayElement;\n    const backdrop = cdkDialogRef.overlayRef.backdropElement;\n    if (options?.closeOnOutsidePointerEvents) {\n      cdkDialogRef.outsidePointerEvents.pipe(takeUntil(destroyed$)).subscribe(() => {\n        brnDialogRef.close(undefined, options?.closeDelay);\n      });\n    }\n    if (options?.closeOnBackdropClick) {\n      cdkDialogRef.backdropClick.pipe(takeUntil(destroyed$)).subscribe(() => {\n        brnDialogRef.close(undefined, options?.closeDelay);\n      });\n    }\n    if (!options?.disableClose) {\n      cdkDialogRef.keydownEvents.pipe(filter(e => e.key === 'Escape'), takeUntil(destroyed$)).subscribe(() => {\n        brnDialogRef.close(undefined, options?.closeDelay);\n      });\n    }\n    cdkDialogRef.closed.pipe(takeUntil(destroyed$)).subscribe(() => {\n      effectRef?.destroy();\n      destroyed$.next();\n    });\n    return brnDialogRef;\n  }\n  /** @nocollapse */\n  static ɵfac = function BrnDialogService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BrnDialogService)();\n  };\n  /** @nocollapse */\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BrnDialogService,\n    factory: BrnDialogService.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrnDialogService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass BrnDialogComponent {\n  _dialogService = inject(BrnDialogService);\n  _vcr = inject(ViewContainerRef);\n  positionBuilder = inject(OverlayPositionBuilder);\n  ssos = inject(ScrollStrategyOptions);\n  _injector = inject(Injector);\n  _defaultOptions = injectBrnDialogDefaultOptions();\n  _context = {};\n  stateComputed = computed(() => this._dialogRef()?.state() ?? 'closed');\n  _contentTemplate;\n  _dialogRef = signal(undefined);\n  _dialogStateEffectRef;\n  _backdropClass = signal(null);\n  _panelClass = signal(null);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  closed = output();\n  stateChanged = output();\n  state = input(null);\n  role = input(this._defaultOptions.role);\n  hasBackdrop = input(this._defaultOptions.hasBackdrop, {\n    transform: booleanAttribute\n  });\n  positionStrategy = input(this._defaultOptions.positionStrategy);\n  mutablePositionStrategy = computed(() => signal(this.positionStrategy()));\n  _positionStrategyState = computed(() => this.mutablePositionStrategy()());\n  scrollStrategy = input(this._defaultOptions.scrollStrategy);\n  _options = computed(() => {\n    const scrollStrategyInput = this.scrollStrategy();\n    let scrollStrategy;\n    if (scrollStrategyInput === 'close') {\n      scrollStrategy = this.ssos.close();\n    } else if (scrollStrategyInput === 'reposition') {\n      scrollStrategy = this.ssos.reposition();\n    } else {\n      scrollStrategy = scrollStrategyInput;\n    }\n    return {\n      role: this.role(),\n      hasBackdrop: this.hasBackdrop(),\n      positionStrategy: this._positionStrategyState(),\n      scrollStrategy,\n      restoreFocus: this.restoreFocus(),\n      closeOnOutsidePointerEvents: this._closeOnOutsidePointerEventsState(),\n      closeOnBackdropClick: this.closeOnBackdropClick(),\n      attachTo: this._attachToState(),\n      attachPositions: this._attachPositionsState(),\n      autoFocus: this.autoFocus(),\n      closeDelay: this.closeDelay(),\n      disableClose: this.disableClose(),\n      backdropClass: this._backdropClass() ?? '',\n      panelClass: this._panelClass() ?? '',\n      ariaDescribedBy: this._ariaDescribedByState(),\n      ariaLabelledBy: this._ariaLabelledByState(),\n      ariaLabel: this._ariaLabelState(),\n      ariaModal: this._ariaModalState()\n    };\n  });\n  constructor() {\n    effect(() => {\n      const state = this.state();\n      if (state === 'open') {\n        untracked(() => this.open());\n      }\n      if (state === 'closed') {\n        untracked(() => this.close());\n      }\n    });\n  }\n  restoreFocus = input(this._defaultOptions.restoreFocus);\n  closeOnOutsidePointerEvents = input(this._defaultOptions.closeOnOutsidePointerEvents, {\n    transform: booleanAttribute\n  });\n  mutableCloseOnOutsidePointerEvents = computed(() => signal(this.closeOnOutsidePointerEvents()));\n  _closeOnOutsidePointerEventsState = computed(() => this.mutableCloseOnOutsidePointerEvents()());\n  closeOnBackdropClick = input(this._defaultOptions.closeOnBackdropClick, {\n    transform: booleanAttribute\n  });\n  attachTo = input(null);\n  mutableAttachTo = computed(() => signal(this.attachTo()));\n  _attachToState = computed(() => this.mutableAttachTo()());\n  attachPositions = input(this._defaultOptions.attachPositions);\n  mutableAttachPositions = computed(() => signal(this.attachPositions()));\n  _attachPositionsState = computed(() => this.mutableAttachPositions()());\n  autoFocus = input(this._defaultOptions.autoFocus);\n  closeDelay = input(this._defaultOptions.closeDelay, {\n    transform: numberAttribute\n  });\n  disableClose = input(this._defaultOptions.disableClose, {\n    transform: booleanAttribute\n  });\n  ariaDescribedBy = input(null, {\n    alias: 'aria-describedby'\n  });\n  _mutableAriaDescribedBy = computed(() => signal(this.ariaDescribedBy()));\n  _ariaDescribedByState = computed(() => this._mutableAriaDescribedBy()());\n  ariaLabelledBy = input(null, {\n    alias: 'aria-labelledby'\n  });\n  _mutableAriaLabelledBy = computed(() => signal(this.ariaLabelledBy()));\n  _ariaLabelledByState = computed(() => this._mutableAriaLabelledBy()());\n  ariaLabel = input(null, {\n    alias: 'aria-label'\n  });\n  _mutableAriaLabel = computed(() => signal(this.ariaLabel()));\n  _ariaLabelState = computed(() => this._mutableAriaLabel()());\n  ariaModal = input(true, {\n    alias: 'aria-modal',\n    transform: booleanAttribute\n  });\n  _mutableAriaModal = computed(() => signal(this.ariaModal()));\n  _ariaModalState = computed(() => this._mutableAriaModal()());\n  open() {\n    if (!this._contentTemplate || this._dialogRef()) return;\n    this._dialogStateEffectRef?.destroy();\n    const dialogRef = this._dialogService.open(this._contentTemplate, this._vcr, this._context, this._options());\n    this._dialogRef.set(dialogRef);\n    runInInjectionContext(this._injector, () => {\n      this._dialogStateEffectRef = effect(() => {\n        const state = dialogRef.state();\n        untracked(() => this.stateChanged.emit(state));\n      });\n    });\n    dialogRef.closed$.pipe(take(1)).subscribe(result => {\n      this._dialogRef.set(undefined);\n      this.closed.emit(result);\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  close(result, delay) {\n    this._dialogRef()?.close(result, delay ?? this._options().closeDelay);\n  }\n  registerTemplate(template) {\n    this._contentTemplate = template;\n  }\n  setOverlayClass(overlayClass) {\n    this._backdropClass.set(overlayClass);\n    this._dialogRef()?.setOverlayClass(overlayClass);\n  }\n  setPanelClass(panelClass) {\n    this._panelClass.set(panelClass ?? '');\n    this._dialogRef()?.setPanelClass(panelClass);\n  }\n  setContext(context) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    this._context = {\n      ...this._context,\n      ...context\n    };\n  }\n  setAriaDescribedBy(ariaDescribedBy) {\n    this._mutableAriaDescribedBy().set(ariaDescribedBy);\n    this._dialogRef()?.setAriaDescribedBy(ariaDescribedBy);\n  }\n  setAriaLabelledBy(ariaLabelledBy) {\n    this._mutableAriaLabelledBy().set(ariaLabelledBy);\n    this._dialogRef()?.setAriaLabelledBy(ariaLabelledBy);\n  }\n  setAriaLabel(ariaLabel) {\n    this._mutableAriaLabel().set(ariaLabel);\n    this._dialogRef()?.setAriaLabel(ariaLabel);\n  }\n  setAriaModal(ariaModal) {\n    this._mutableAriaModal().set(ariaModal);\n  }\n  /** @nocollapse */\n  static ɵfac = function BrnDialogComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BrnDialogComponent)();\n  };\n  /** @nocollapse */\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BrnDialogComponent,\n    selectors: [[\"brn-dialog\"]],\n    inputs: {\n      state: [1, \"state\"],\n      role: [1, \"role\"],\n      hasBackdrop: [1, \"hasBackdrop\"],\n      positionStrategy: [1, \"positionStrategy\"],\n      scrollStrategy: [1, \"scrollStrategy\"],\n      restoreFocus: [1, \"restoreFocus\"],\n      closeOnOutsidePointerEvents: [1, \"closeOnOutsidePointerEvents\"],\n      closeOnBackdropClick: [1, \"closeOnBackdropClick\"],\n      attachTo: [1, \"attachTo\"],\n      attachPositions: [1, \"attachPositions\"],\n      autoFocus: [1, \"autoFocus\"],\n      closeDelay: [1, \"closeDelay\"],\n      disableClose: [1, \"disableClose\"],\n      ariaDescribedBy: [1, \"aria-describedby\", \"ariaDescribedBy\"],\n      ariaLabelledBy: [1, \"aria-labelledby\", \"ariaLabelledBy\"],\n      ariaLabel: [1, \"aria-label\", \"ariaLabel\"],\n      ariaModal: [1, \"aria-modal\", \"ariaModal\"]\n    },\n    outputs: {\n      closed: \"closed\",\n      stateChanged: \"stateChanged\"\n    },\n    exportAs: [\"brnDialog\"],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function BrnDialogComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrnDialogComponent, [{\n    type: Component,\n    args: [{\n      selector: 'brn-dialog',\n      standalone: true,\n      template: `\n\t\t<ng-content />\n\t`,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'brnDialog'\n    }]\n  }], () => [], null);\n})();\nclass BrnDialogContentDirective {\n  _brnDialog = inject(BrnDialogComponent, {\n    optional: true\n  });\n  _brnDialogRef = inject(BrnDialogRef, {\n    optional: true\n  });\n  _template = inject(TemplateRef);\n  state = computed(() => this._brnDialog?.stateComputed() ?? this._brnDialogRef?.state() ?? 'closed');\n  className = input(undefined, {\n    alias: 'class'\n  });\n  context = input(undefined);\n  constructor() {\n    if (!this._brnDialog) return;\n    this._brnDialog.registerTemplate(this._template);\n    effect(() => {\n      const context = this.context();\n      if (!this._brnDialog || !context) return;\n      untracked(() => this._brnDialog?.setContext(context));\n    });\n    effect(() => {\n      if (!this._brnDialog) return;\n      const newClass = this.className();\n      untracked(() => this._brnDialog?.setPanelClass(newClass));\n    });\n  }\n  /** @nocollapse */\n  static ɵfac = function BrnDialogContentDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BrnDialogContentDirective)();\n  };\n  /** @nocollapse */\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BrnDialogContentDirective,\n    selectors: [[\"\", \"brnDialogContent\", \"\"]],\n    inputs: {\n      className: [1, \"class\", \"className\"],\n      context: [1, \"context\"]\n    },\n    features: [i0.ɵɵProvidersFeature([provideExposesStateProviderExisting(() => BrnDialogContentDirective)])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrnDialogContentDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[brnDialogContent]',\n      standalone: true,\n      providers: [provideExposesStateProviderExisting(() => BrnDialogContentDirective)]\n    }]\n  }], () => [], null);\n})();\nclass BrnDialogDescriptionDirective {\n  _brnDialogRef = inject(BrnDialogRef);\n  _id = signal(`brn-dialog-description-${this._brnDialogRef?.dialogId}`);\n  constructor() {\n    effect(() => {\n      this._brnDialogRef.setAriaDescribedBy(this._id());\n    });\n  }\n  /** @nocollapse */\n  static ɵfac = function BrnDialogDescriptionDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BrnDialogDescriptionDirective)();\n  };\n  /** @nocollapse */\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BrnDialogDescriptionDirective,\n    selectors: [[\"\", \"brnDialogDescription\", \"\"]],\n    hostVars: 1,\n    hostBindings: function BrnDialogDescriptionDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx._id());\n      }\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrnDialogDescriptionDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[brnDialogDescription]',\n      standalone: true,\n      host: {\n        '[id]': '_id()'\n      }\n    }]\n  }], () => [], null);\n})();\nclass BrnDialogOverlayComponent {\n  _brnDialog = inject(BrnDialogComponent);\n  className = input(undefined, {\n    alias: 'class'\n  });\n  setClassToCustomElement(newClass) {\n    this._brnDialog.setOverlayClass(newClass);\n  }\n  constructor() {\n    effect(() => {\n      if (!this._brnDialog) return;\n      const newClass = this.className();\n      untracked(() => this._brnDialog.setOverlayClass(newClass));\n    });\n  }\n  /** @nocollapse */\n  static ɵfac = function BrnDialogOverlayComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BrnDialogOverlayComponent)();\n  };\n  /** @nocollapse */\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BrnDialogOverlayComponent,\n    selectors: [[\"brn-dialog-overlay\"]],\n    inputs: {\n      className: [1, \"class\", \"className\"]\n    },\n    features: [i0.ɵɵProvidersFeature([provideCustomClassSettableExisting(() => BrnDialogOverlayComponent)])],\n    decls: 0,\n    vars: 0,\n    template: function BrnDialogOverlayComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrnDialogOverlayComponent, [{\n    type: Component,\n    args: [{\n      selector: 'brn-dialog-overlay',\n      standalone: true,\n      template: '',\n      providers: [provideCustomClassSettableExisting(() => BrnDialogOverlayComponent)],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [], null);\n})();\nclass BrnDialogTitleDirective {\n  _brnDialogRef = inject(BrnDialogRef);\n  _id = signal(`brn-dialog-title-${this._brnDialogRef?.dialogId}`);\n  constructor() {\n    effect(() => {\n      this._brnDialogRef.setAriaLabelledBy(this._id());\n    });\n  }\n  /** @nocollapse */\n  static ɵfac = function BrnDialogTitleDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BrnDialogTitleDirective)();\n  };\n  /** @nocollapse */\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BrnDialogTitleDirective,\n    selectors: [[\"\", \"brnDialogTitle\", \"\"]],\n    hostVars: 1,\n    hostBindings: function BrnDialogTitleDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx._id());\n      }\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrnDialogTitleDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[brnDialogTitle]',\n      standalone: true,\n      host: {\n        '[id]': '_id()'\n      }\n    }]\n  }], () => [], null);\n})();\nlet idSequence = 0;\nclass BrnDialogTriggerDirective {\n  _brnDialog = inject(BrnDialogComponent, {\n    optional: true\n  });\n  _brnDialogRef = inject(BrnDialogRef, {\n    optional: true\n  });\n  id = input(`brn-dialog-trigger-${idSequence++}`);\n  state = this._brnDialogRef?.state ?? signal('closed');\n  dialogId = `brn-dialog-${this._brnDialogRef?.dialogId ?? idSequence++}`;\n  brnDialogTriggerFor = input(undefined, {\n    alias: 'brnDialogTriggerFor'\n  });\n  mutableBrnDialogTriggerFor = computed(() => signal(this.brnDialogTriggerFor()));\n  brnDialogTriggerForState = computed(() => this.mutableBrnDialogTriggerFor()());\n  constructor() {\n    effect(() => {\n      const brnDialog = this.brnDialogTriggerForState();\n      if (!brnDialog) return;\n      this._brnDialog = brnDialog;\n    });\n  }\n  open() {\n    this._brnDialog?.open();\n  }\n  /** @nocollapse */\n  static ɵfac = function BrnDialogTriggerDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BrnDialogTriggerDirective)();\n  };\n  /** @nocollapse */\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BrnDialogTriggerDirective,\n    selectors: [[\"button\", \"brnDialogTrigger\", \"\"], [\"button\", \"brnDialogTriggerFor\", \"\"]],\n    hostAttrs: [\"aria-haspopup\", \"dialog\"],\n    hostVars: 4,\n    hostBindings: function BrnDialogTriggerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function BrnDialogTriggerDirective_click_HostBindingHandler() {\n          return ctx.open();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id());\n        i0.ɵɵattribute(\"aria-expanded\", ctx.state() === \"open\" ? \"true\" : \"false\")(\"data-state\", ctx.state())(\"aria-controls\", ctx.dialogId);\n      }\n    },\n    inputs: {\n      id: [1, \"id\"],\n      brnDialogTriggerFor: [1, \"brnDialogTriggerFor\"]\n    },\n    exportAs: [\"brnDialogTrigger\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrnDialogTriggerDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'button[brnDialogTrigger],button[brnDialogTriggerFor]',\n      standalone: true,\n      host: {\n        '[id]': 'id()',\n        '(click)': 'open()',\n        'aria-haspopup': 'dialog',\n        '[attr.aria-expanded]': \"state() === 'open' ? 'true': 'false'\",\n        '[attr.data-state]': 'state()',\n        '[attr.aria-controls]': 'dialogId'\n      },\n      exportAs: 'brnDialogTrigger'\n    }]\n  }], () => [], null);\n})();\nconst DEFAULT_BRN_DIALOG_OPTIONS = {\n  role: 'dialog',\n  attachPositions: [],\n  attachTo: null,\n  autoFocus: 'first-tabbable',\n  backdropClass: '',\n  closeDelay: 100,\n  closeOnBackdropClick: true,\n  closeOnOutsidePointerEvents: false,\n  hasBackdrop: true,\n  panelClass: '',\n  positionStrategy: null,\n  restoreFocus: true,\n  scrollStrategy: null,\n  disableClose: false,\n  ariaLabel: undefined,\n  ariaModal: true\n};\nconst BrnDialogImports = [BrnDialogComponent, BrnDialogOverlayComponent, BrnDialogTriggerDirective, BrnDialogCloseDirective, BrnDialogContentDirective, BrnDialogTitleDirective, BrnDialogDescriptionDirective];\nclass BrnDialogModule {\n  /** @nocollapse */static ɵfac = function BrnDialogModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BrnDialogModule)();\n  };\n  /** @nocollapse */\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: BrnDialogModule,\n    imports: [BrnDialogComponent, BrnDialogOverlayComponent, BrnDialogTriggerDirective, BrnDialogCloseDirective, BrnDialogContentDirective, BrnDialogTitleDirective, BrnDialogDescriptionDirective],\n    exports: [BrnDialogComponent, BrnDialogOverlayComponent, BrnDialogTriggerDirective, BrnDialogCloseDirective, BrnDialogContentDirective, BrnDialogTitleDirective, BrnDialogDescriptionDirective]\n  });\n  /** @nocollapse */\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrnDialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [...BrnDialogImports],\n      exports: [...BrnDialogImports]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrnDialogCloseDirective, BrnDialogComponent, BrnDialogContentDirective, BrnDialogDescriptionDirective, BrnDialogImports, BrnDialogModule, BrnDialogOverlayComponent, BrnDialogRef, BrnDialogService, BrnDialogTitleDirective, BrnDialogTriggerDirective, DEFAULT_BRN_DIALOG_OPTIONS, cssClassesToArray, defaultOptions, injectBrnDialogContext, injectBrnDialogCtx, injectBrnDialogDefaultOptions, provideBrnDialogDefaultOptions };\n"],
  "mappings": "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",
  "names": ["cdkDialogRef"]
}
